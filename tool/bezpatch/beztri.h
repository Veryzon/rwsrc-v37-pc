#if (!defined(BEZTRI_H))
#define BEZTRI_H

#include <rwcore.h>
#include "rtbezpat.h"

#define  _R6 (((RwReal)1)/((RwReal) 6))
#define  _R12 (((RwReal)1)/((RwReal) 12))

#define RtBezierTriangleControlFit3dMacro(_T, _P)                       \
MACRO_START                                                             \
{                                                                       \
    const RtBezierV4d        * const P0 = &(_P)[0][0];                  \
    const RtBezierV4d        * const P1 = &(_P)[1][0];                  \
    const RtBezierV4d        * const P2 = &(_P)[2][0];                  \
    const RtBezierV4d        * const P3 = &(_P)[3][0];                  \
    RtBezierV4d              * const T0 = &(_T)[0][0];                  \
    RtBezierV4d              * const T1 = &(_T)[1][0];                  \
    RtBezierV4d              * const T2 = &(_T)[2][0];                  \
    RtBezierV4d              * const T3 = &(_T)[3][0];                  \
                                                                        \
    T0[0].x = P0[0].x;                                                  \
    T0[0].y = P0[0].y;                                                  \
    T0[0].z = P0[0].z;                                                  \
                                                                        \
    T0[1].x = (18*P0[1].x - 5*P0[0].x - 9*P0[2].x + 2*P0[3].x)*_R6;     \
    T0[1].y = (18*P0[1].y - 5*P0[0].y - 9*P0[2].y + 2*P0[3].y)*_R6;     \
    T0[1].z = (18*P0[1].z - 5*P0[0].z - 9*P0[2].z + 2*P0[3].z)*_R6;     \
                                                                        \
    T0[2].x = (2*P0[0].x - 9*P0[1].x + 18*P0[2].x - 5*P0[3].x)*_R6;     \
    T0[2].y = (2*P0[0].y - 9*P0[1].y + 18*P0[2].y - 5*P0[3].y)*_R6;     \
    T0[2].z = (2*P0[0].z - 9*P0[1].z + 18*P0[2].z - 5*P0[3].z)*_R6;     \
                                                                        \
    T0[3].x = P0[3].x;                                                  \
    T0[3].y = P0[3].y;                                                  \
    T0[3].z = P0[3].z;                                                  \
                                                                        \
    T1[0].x = (18*P1[0].x - 5*P0[0].x - 9*P2[0].x + 2*P3[0].x)*_R6;     \
    T1[0].y = (18*P1[0].y - 5*P0[0].y - 9*P2[0].y + 2*P3[0].y)*_R6;     \
    T1[0].z = (18*P1[0].z - 5*P0[0].z - 9*P2[0].z + 2*P3[0].z)*_R6;     \
                                                                        \
    T1[1].x = (4*P0[0].x - 9*P0[1].x - 9*P0[2].x + 4*P0[3].x -          \
               9*P1[0].x + 54*P1[1].x - 9*P1[2].x - 9*P2[0].x -         \
               9*P2[1].x + 4*P3[0].x)*_R12;                             \
    T1[1].y = (4*P0[0].y - 9*P0[1].y - 9*P0[2].y + 4*P0[3].y -          \
               9*P1[0].y + 54*P1[1].y - 9*P1[2].y - 9*P2[0].y -         \
               9*P2[1].y + 4*P3[0].y)*_R12;                             \
    T1[1].z = (4*P0[0].z - 9*P0[1].z - 9*P0[2].z + 4*P0[3].z -          \
               9*P1[0].z + 54*P1[1].z - 9*P1[2].z - 9*P2[0].z -         \
               9*P2[1].z + 4*P3[0].z)*_R12;                             \
                                                                        \
    T1[2].x = (18*P1[2].x - 5*P0[3].x - 9*P2[1].x + 2*P3[0].x)*_R6;     \
    T1[2].y = (18*P1[2].y - 5*P0[3].y - 9*P2[1].y + 2*P3[0].y)*_R6;     \
    T1[2].z = (18*P1[2].z - 5*P0[3].z - 9*P2[1].z + 2*P3[0].z)*_R6;     \
                                                                        \
    T2[0].x = (2*P0[0].x - 9*P1[0].x + 18*P2[0].x - 5*P3[0].x)*_R6;     \
    T2[0].y = (2*P0[0].y - 9*P1[0].y + 18*P2[0].y - 5*P3[0].y)*_R6;     \
    T2[0].z = (2*P0[0].z - 9*P1[0].z + 18*P2[0].z - 5*P3[0].z)*_R6;     \
                                                                        \
    T2[1].x = (2*P0[3].x - 9*P1[2].x + 18*P2[1].x - 5*P3[0].x)*_R6;     \
    T2[1].y = (2*P0[3].y - 9*P1[2].y + 18*P2[1].y - 5*P3[0].y)*_R6;     \
    T2[1].z = (2*P0[3].z - 9*P1[2].z + 18*P2[1].z - 5*P3[0].z)*_R6;     \
                                                                        \
    T3[0].x = P3[0].x;                                                  \
    T3[0].y = P3[0].y;                                                  \
    T3[0].z = P3[0].z;                                                  \
}                                                                       \
MACRO_STOP

#define  RtBezierQuadFromTriangleMacro(Q, T)                             \
MACRO_START                                                              \
{                                                                        \
    const RtBezierV4d  *const T0 = &(T)[0][0];                           \
    const RtBezierV4d  *const T1 = &(T)[1][0];                           \
    const RtBezierV4d  *const T2 = &(T)[2][0];                           \
    const RtBezierV4d  *const T3 = &(T)[3][0];                           \
    RtBezierV4d        *const Q0 = &(Q)[0][0];                           \
    RtBezierV4d        *const Q1 = &(Q)[1][0];                           \
    RtBezierV4d        *const Q2 = &(Q)[2][0];                           \
    RtBezierV4d        *const Q3 = &(Q)[3][0];                           \
                                                                         \
                                                                         \
    /* Row 0 */                                                          \
    Q0[0].x = (T0[0].x);                                                 \
    Q0[0].y = (T0[0].y);                                                 \
    Q0[0].z = (T0[0].z);                                                 \
    Q0[1].x = (T0[1].x);                                                 \
    Q0[1].y = (T0[1].y);                                                 \
    Q0[1].z = (T0[1].z);                                                 \
    Q0[2].x = (T0[2].x);                                                 \
    Q0[2].y = (T0[2].y);                                                 \
    Q0[2].z = (T0[2].z);                                                 \
    Q0[3].x = (T0[3].x);                                                 \
    Q0[3].y = (T0[3].y);                                                 \
    Q0[3].z = (T0[3].z);                                                 \
                                                                         \
    /* Row 1 */                                                          \
    Q1[0].x = (T1[0].x);                                                 \
    Q1[0].y = (T1[0].y);                                                 \
    Q1[0].z = (T1[0].z);                                                 \
    Q1[1].x = ((2 * T1[1].x + T1[0].x - T0[0].x + T0[1].x) / 3);         \
    Q1[1].y = ((2 * T1[1].y + T1[0].y - T0[0].y + T0[1].y) / 3);         \
    Q1[1].z = ((2 * T1[1].z + T1[0].z - T0[0].z + T0[1].z) / 3);         \
    Q1[2].x = ((T1[2].x + 2 * T1[1].x + 2 * T0[2].x - 2 * T0[1].x) / 3); \
    Q1[2].y = ((T1[2].y + 2 * T1[1].y + 2 * T0[2].y - 2 * T0[1].y) / 3); \
    Q1[2].z = ((T1[2].z + 2 * T1[1].z + 2 * T0[2].z - 2 * T0[1].z) / 3); \
    Q1[3].x = (T1[2].x - T0[2].x + T0[3].x);                             \
    Q1[3].y = (T1[2].y - T0[2].y + T0[3].y);                             \
    Q1[3].z = (T1[2].z - T0[2].z + T0[3].z);                             \
                                                                         \
    /* Row 2 */                                                          \
    Q2[0].x = (T2[0].x);                                                 \
    Q2[0].y = (T2[0].y);                                                 \
    Q2[0].z = (T2[0].z);                                                 \
    Q2[1].x = ((T2[1].x + 2 * T2[0].x + 2 * T1[1].x - 2 * T1[0].x) / 3); \
    Q2[1].y = ((T2[1].y + 2 * T2[0].y + 2 * T1[1].y - 2 * T1[0].y) / 3); \
    Q2[1].z = ((T2[1].z + 2 * T2[0].z + 2 * T1[1].z - 2 * T1[0].z) / 3); \
    Q2[2].x = ((2 * T2[1].x + T2[0].x + 2 * T1[2].x - 2 * T1[0].x +      \
                T0[0].x + T0[2].x - 2 * T0[1].x) / 3);                   \
    Q2[2].y = ((2 * T2[1].y + T2[0].y + 2 * T1[2].y - 2 * T1[0].y +      \
                T0[0].y + T0[2].y - 2 * T0[1].y) / 3);                   \
    Q2[2].z = ((2 * T2[1].z + T2[0].z + 2 * T1[2].z - 2 * T1[0].z +      \
                T0[0].z + T0[2].z - 2 * T0[1].z) / 3);                   \
    Q2[3].x = (T0[1].x - 2 * T1[1].x + T2[1].x + 2 * T1[2].x -           \
               2 * T0[2].x + T0[3].x);                                   \
    Q2[3].y = (T0[1].y - 2 * T1[1].y + T2[1].y + 2 * T1[2].y -           \
               2 * T0[2].y + T0[3].y);                                   \
    Q2[3].z = (T0[1].z - 2 * T1[1].z + T2[1].z + 2 * T1[2].z -           \
               2 * T0[2].z + T0[3].z);                                   \
                                                                         \
    /* Row 3 */                                                          \
    Q3[0].x = (T3[0].x);                                                 \
    Q3[0].y = (T3[0].y);                                                 \
    Q3[0].z = (T3[0].z);                                                 \
    Q3[1].x = (T3[0].x - T2[0].x + T2[1].x);                             \
    Q3[1].y = (T3[0].y - T2[0].y + T2[1].y);                             \
    Q3[1].z = (T3[0].z - T2[0].z + T2[1].z);                             \
    Q3[2].x = (T3[0].x - 2 * T2[0].x + 2 * T2[1].x + T1[2].x -           \
               2 * T1[1].x + T1[0].x);                                   \
    Q3[2].y = (T3[0].y - 2 * T2[0].y + 2 * T2[1].y + T1[2].y -           \
               2 * T1[1].y + T1[0].y);                                   \
    Q3[2].z = (T3[0].z - 2 * T2[0].z + 2 * T2[1].z + T1[2].z -           \
               2 * T1[1].z + T1[0].z);                                   \
    Q3[3].x = (T3[0].x + 3 * T2[1].x - 3 * T2[0].x + 3 * T1[2].x -       \
               6 * T1[1].x + 3 * T1[0].x + T0[3].x - 3 * T0[2].x +       \
               3 * T0[1].x - T0[0].x);                                   \
    Q3[3].y = (T3[0].y + 3 * T2[1].y - 3 * T2[0].y + 3 * T1[2].y -       \
               6 * T1[1].y + 3 * T1[0].y + T0[3].y - 3 * T0[2].y +       \
               3 * T0[1].y - T0[0].y);                                   \
    Q3[3].z = (T3[0].z + 3 * T2[1].z - 3 * T2[0].z + 3 * T1[2].z -       \
               6 * T1[1].z + 3 * T1[0].z + T0[3].z - 3 * T0[2].z +       \
               3 * T0[1].z - T0[0].z);                                   \
}                                                                        \
MACRO_STOP

#ifdef    __cplusplus
extern              "C"
{
#endif                          /* __cplusplus */

#ifdef    __cplusplus
}
#endif                          /* __cplusplus */

#endif                          /* (!defined(BEZTRI_H)) */
