/*
 * Data structures for rtbezpat toolkit
 * Copyright (c) Criterion Software Limited
 */

#if (!defined(_BEZQUAD_H))
#define _BEZQUAD_H

#include <rwcore.h>
#include "rtbezpat.h"

#define  _R2 (((RwReal)1)/((RwReal) 2))
#define  _R3 (((RwReal)1)/((RwReal) 3))
#define  _R4 (((RwReal)1)/((RwReal) 4))
#define  _R6 (((RwReal)1)/((RwReal) 6))
#define _R36 (((RwReal)1)/((RwReal)36))

#define RwV3dFromBezierV4d(v3d, v4d)            \
MACRO_START                                     \
{                                               \
    (v3d)->x = (v4d)->x;                        \
    (v3d)->y = (v4d)->y;                        \
    (v3d)->z = (v4d)->z;                        \
}                                               \
MACRO_STOP

#define RwUnitV3dFromBezierV4d(v3d, v4d)        \
MACRO_START                                     \
{                                               \
    RwReal len2;                                \
                                                \
    RwV3dFromBezierV4d(v3d, v4d);               \
                                                \
    len2 = RwV3dDotProduct(v3d, v3d);           \
    if (INVALID_LENGTH < len2)                  \
    {                                           \
        len2 = 1.0f / len2;                     \
        rwSqrtMacro(&len2, len2);               \
                                                \
        RwV3dScale(v3d, v3d, len2);             \
    }                                           \
}                                               \
MACRO_STOP

#define RtBezierQuadControlFit3dMacro(_B, _P)                           \
MACRO_START                                                             \
{                                                                       \
    const RtBezierV4d        * const P0 = &(_P)[0][0];                  \
    const RtBezierV4d        * const P1 = &(_P)[1][0];                  \
    const RtBezierV4d        * const P2 = &(_P)[2][0];                  \
    const RtBezierV4d        * const P3 = &(_P)[3][0];                  \
    RtBezierV4d              * const B0 = &(_B)[0][0];                  \
    RtBezierV4d              * const B1 = &(_B)[1][0];                  \
    RtBezierV4d              * const B2 = &(_B)[2][0];                  \
    RtBezierV4d              * const B3 = &(_B)[3][0];                  \
                                                                        \
    B0[0].x = P0[0].x;                                                  \
    B0[0].y = P0[0].y;                                                  \
    B0[0].z = P0[0].z;                                                  \
                                                                        \
    B0[1].x = (18*P0[1].x - 5*P0[0].x - 9*P0[2].x + 2*P0[3].x)*_R6;     \
    B0[1].y = (18*P0[1].y - 5*P0[0].y - 9*P0[2].y + 2*P0[3].y)*_R6;     \
    B0[1].z = (18*P0[1].z - 5*P0[0].z - 9*P0[2].z + 2*P0[3].z)*_R6;     \
                                                                        \
    B0[2].x = (2*P0[0].x - 9*P0[1].x + 18*P0[2].x - 5*P0[3].x)*_R6;     \
    B0[2].y = (2*P0[0].y - 9*P0[1].y + 18*P0[2].y - 5*P0[3].y)*_R6;     \
    B0[2].z = (2*P0[0].z - 9*P0[1].z + 18*P0[2].z - 5*P0[3].z)*_R6;     \
                                                                        \
    B0[3].x = P0[3].x;                                                  \
    B0[3].y = P0[3].y;                                                  \
    B0[3].z = P0[3].z;                                                  \
                                                                        \
    B1[0].x = (18*P1[0].x - 5*P0[0].x - 9*P2[0].x + 2*P3[0].x)*_R6;     \
    B1[0].y = (18*P1[0].y - 5*P0[0].y - 9*P2[0].y + 2*P3[0].y)*_R6;     \
    B1[0].z = (18*P1[0].z - 5*P0[0].z - 9*P2[0].z + 2*P3[0].z)*_R6;     \
                                                                        \
    B1[1].x = (25*P0[0].x - 90*P0[1].x + 45*P0[2].x - 10*P0[3].x -      \
               90*P1[0].x + 324*P1[1].x - 162*P1[2].x + 36*P1[3].x +    \
               45*P2[0].x - 162*P2[1].x + 81*P2[2].x - 18*P2[3].x -     \
               10*P3[0].x + 36*P3[1].x - 18*P3[2].x + 4*P3[3].x)*_R36;  \
    B1[1].y = (25*P0[0].y - 90*P0[1].y + 45*P0[2].y - 10*P0[3].y -      \
               90*P1[0].y + 324*P1[1].y - 162*P1[2].y + 36*P1[3].y +    \
               45*P2[0].y - 162*P2[1].y + 81*P2[2].y - 18*P2[3].y -     \
               10*P3[0].y + 36*P3[1].y - 18*P3[2].y + 4*P3[3].y)*_R36;  \
    B1[1].z = (25*P0[0].z - 90*P0[1].z + 45*P0[2].z - 10*P0[3].z -      \
               90*P1[0].z + 324*P1[1].z - 162*P1[2].z + 36*P1[3].z +    \
               45*P2[0].z - 162*P2[1].z + 81*P2[2].z - 18*P2[3].z -     \
               10*P3[0].z + 36*P3[1].z - 18*P3[2].z + 4*P3[3].z)*_R36;  \
                                                                        \
    B1[2].x = (45*P0[1].x - 10*P0[0].x - 90*P0[2].x + 25*P0[3].x +      \
               36*P1[0].x - 162*P1[1].x + 324*P1[2].x - 90*P1[3].x -    \
               18*P2[0].x + 81*P2[1].x - 162*P2[2].x + 45*P2[3].x +     \
               4*P3[0].x - 18*P3[1].x + 36*P3[2].x - 10*P3[3].x)*_R36;  \
    B1[2].y = (45*P0[1].y - 10*P0[0].y - 90*P0[2].y + 25*P0[3].y +      \
               36*P1[0].y - 162*P1[1].y + 324*P1[2].y - 90*P1[3].y -    \
               18*P2[0].y + 81*P2[1].y - 162*P2[2].y + 45*P2[3].y +     \
               4*P3[0].y - 18*P3[1].y + 36*P3[2].y - 10*P3[3].y)*_R36;  \
    B1[2].z = (45*P0[1].z - 10*P0[0].z - 90*P0[2].z + 25*P0[3].z +      \
               36*P1[0].z - 162*P1[1].z + 324*P1[2].z - 90*P1[3].z -    \
               18*P2[0].z + 81*P2[1].z - 162*P2[2].z + 45*P2[3].z +     \
               4*P3[0].z - 18*P3[1].z + 36*P3[2].z - 10*P3[3].z)*_R36;  \
                                                                        \
    B1[3].x = (18*P1[3].x - 5*P0[3].x - 9*P2[3].x + 2*P3[3].x)*_R6;     \
    B1[3].y = (18*P1[3].y - 5*P0[3].y - 9*P2[3].y + 2*P3[3].y)*_R6;     \
    B1[3].z = (18*P1[3].z - 5*P0[3].z - 9*P2[3].z + 2*P3[3].z)*_R6;     \
                                                                        \
    B2[0].x = (2*P0[0].x - 9*P1[0].x + 18*P2[0].x - 5*P3[0].x)*_R6;     \
    B2[0].y = (2*P0[0].y - 9*P1[0].y + 18*P2[0].y - 5*P3[0].y)*_R6;     \
    B2[0].z = (2*P0[0].z - 9*P1[0].z + 18*P2[0].z - 5*P3[0].z)*_R6;     \
                                                                        \
    B2[1].x = (36*P0[1].x - 10*P0[0].x - 18*P0[2].x + 4*P0[3].x +       \
               45*P1[0].x - 162*P1[1].x + 81*P1[2].x - 18*P1[3].x -     \
               90*P2[0].x + 324*P2[1].x - 162*P2[2].x + 36*P2[3].x +    \
               25*P3[0].x - 90*P3[1].x + 45*P3[2].x -                   \
               10*P3[3].x)*_R36;                                        \
    B2[1].y = (36*P0[1].y - 10*P0[0].y - 18*P0[2].y + 4*P0[3].y +       \
               45*P1[0].y - 162*P1[1].y + 81*P1[2].y - 18*P1[3].y -     \
               90*P2[0].y + 324*P2[1].y - 162*P2[2].y + 36*P2[3].y +    \
               25*P3[0].y - 90*P3[1].y + 45*P3[2].y -                   \
               10*P3[3].y)*_R36;                                        \
    B2[1].z = (36*P0[1].z - 10*P0[0].z - 18*P0[2].z + 4*P0[3].z +       \
               45*P1[0].z - 162*P1[1].z + 81*P1[2].z - 18*P1[3].z -     \
               90*P2[0].z + 324*P2[1].z - 162*P2[2].z + 36*P2[3].z +    \
               25*P3[0].z - 90*P3[1].z + 45*P3[2].z -                   \
               10*P3[3].z)*_R36;                                        \
                                                                        \
    B2[2].x = (4*P0[0].x - 18*P0[1].x + 36*P0[2].x - 10*P0[3].x -       \
               18*P1[0].x + 81*P1[1].x - 162*P1[2].x + 45*P1[3].x +     \
               36*P2[0].x - 162*P2[1].x + 324*P2[2].x - 90*P2[3].x -    \
               10*P3[0].x + 45*P3[1].x - 90*P3[2].x +                   \
               25*P3[3].x)*_R36;                                        \
    B2[2].y = (4*P0[0].y - 18*P0[1].y + 36*P0[2].y - 10*P0[3].y -       \
               18*P1[0].y + 81*P1[1].y - 162*P1[2].y + 45*P1[3].y +     \
               36*P2[0].y - 162*P2[1].y + 324*P2[2].y - 90*P2[3].y -    \
               10*P3[0].y + 45*P3[1].y - 90*P3[2].y +                   \
               25*P3[3].y)*_R36;                                        \
    B2[2].z = (4*P0[0].z - 18*P0[1].z + 36*P0[2].z - 10*P0[3].z -       \
               18*P1[0].z + 81*P1[1].z - 162*P1[2].z + 45*P1[3].z +     \
               36*P2[0].z - 162*P2[1].z + 324*P2[2].z - 90*P2[3].z -    \
               10*P3[0].z + 45*P3[1].z - 90*P3[2].z +                   \
               25*P3[3].z)*_R36;                                        \
                                                                        \
    B2[3].x = (2*P0[3].x - 9*P1[3].x + 18*P2[3].x - 5*P3[3].x)*_R6;     \
    B2[3].y = (2*P0[3].y - 9*P1[3].y + 18*P2[3].y - 5*P3[3].y)*_R6;     \
    B2[3].z = (2*P0[3].z - 9*P1[3].z + 18*P2[3].z - 5*P3[3].z)*_R6;     \
                                                                        \
    B3[0].x = P3[0].x;                                                  \
    B3[0].y = P3[0].y;                                                  \
    B3[0].z = P3[0].z;                                                  \
                                                                        \
    B3[1].x = (18*P3[1].x - 5*P3[0].x - 9*P3[2].x + 2*P3[3].x)*_R6;     \
    B3[1].y = (18*P3[1].y - 5*P3[0].y - 9*P3[2].y + 2*P3[3].y)*_R6;     \
    B3[1].z = (18*P3[1].z - 5*P3[0].z - 9*P3[2].z + 2*P3[3].z)*_R6;     \
                                                                        \
    B3[2].x = (2*P3[0].x - 9*P3[1].x + 18*P3[2].x - 5*P3[3].x)*_R6;     \
    B3[2].y = (2*P3[0].y - 9*P3[1].y + 18*P3[2].y - 5*P3[3].y)*_R6;     \
    B3[2].z = (2*P3[0].z - 9*P3[1].z + 18*P3[2].z - 5*P3[3].z)*_R6;     \
                                                                        \
    B3[3].x = P3[3].x;                                                  \
    B3[3].y = P3[3].y;                                                  \
    B3[3].z = P3[3].z;                                                  \
}                                                                       \
MACRO_STOP

#define RtBezierQuadBernsteinWeight3dMacro(_W, _B)              \
MACRO_START                                                     \
{                                                               \
    RtBezierV4d        *const W0 = &(_W)[0][0];                 \
    RtBezierV4d        *const W1 = &(_W)[1][0];                 \
    RtBezierV4d        *const W2 = &(_W)[2][0];                 \
    RtBezierV4d        *const W3 = &(_W)[3][0];                 \
    RtBezierV4d        *const B0 = &(_B)[0][0];                 \
    RtBezierV4d        *const B1 = &(_B)[1][0];                 \
    RtBezierV4d        *const B2 = &(_B)[2][0];                 \
    RtBezierV4d        *const B3 = &(_B)[3][0];                 \
                                                                \
    W3[3].x = B0[0].x;                                          \
    W3[3].y = B0[0].y;                                          \
    W3[3].z = B0[0].z;                                          \
    W3[2].x = 3*(B0[1].x - B0[0].x);                            \
    W3[2].y = 3*(B0[1].y - B0[0].y);                            \
    W3[2].z = 3*(B0[1].z - B0[0].z);                            \
    W3[1].x = 3*(B0[2].x - B0[1].x);                            \
    W3[1].y = 3*(B0[2].y - B0[1].y);                            \
    W3[1].z = 3*(B0[2].z - B0[1].z);                            \
    W3[0].x = B0[3].x - B0[0].x - W3[1].x;                      \
    W3[0].y = B0[3].y - B0[0].y - W3[1].y;                      \
    W3[0].z = B0[3].z - B0[0].z - W3[1].z;                      \
    W3[1].x = W3[1].x - W3[2].x;                                \
    W3[1].y = W3[1].y - W3[2].y;                                \
    W3[1].z = W3[1].z - W3[2].z;                                \
                                                                \
    W2[3].x = B1[0].x;                                          \
    W2[3].y = B1[0].y;                                          \
    W2[3].z = B1[0].z;                                          \
    W2[2].x = 3*(B1[1].x - B1[0].x);                            \
    W2[2].y = 3*(B1[1].y - B1[0].y);                            \
    W2[2].z = 3*(B1[1].z - B1[0].z);                            \
    W2[1].x = 3*(B1[2].x - B1[1].x);                            \
    W2[1].y = 3*(B1[2].y - B1[1].y);                            \
    W2[1].z = 3*(B1[2].z - B1[1].z);                            \
    W2[0].x = B1[3].x - B1[0].x - W2[1].x;                      \
    W2[0].y = B1[3].y - B1[0].y - W2[1].y;                      \
    W2[0].z = B1[3].z - B1[0].z - W2[1].z;                      \
    W2[1].x = W2[1].x - W2[2].x;                                \
    W2[1].y = W2[1].y - W2[2].y;                                \
    W2[1].z = W2[1].z - W2[2].z;                                \
                                                                \
    W1[3].x = B2[0].x;                                          \
    W1[3].y = B2[0].y;                                          \
    W1[3].z = B2[0].z;                                          \
    W1[2].x = 3*(B2[1].x - B2[0].x);                            \
    W1[2].y = 3*(B2[1].y - B2[0].y);                            \
    W1[2].z = 3*(B2[1].z - B2[0].z);                            \
    W1[1].x = 3*(B2[2].x - B2[1].x);                            \
    W1[1].y = 3*(B2[2].y - B2[1].y);                            \
    W1[1].z = 3*(B2[2].z - B2[1].z);                            \
    W1[0].x = B2[3].x - B2[0].x - W1[1].x;                      \
    W1[0].y = B2[3].y - B2[0].y - W1[1].y;                      \
    W1[0].z = B2[3].z - B2[0].z - W1[1].z;                      \
    W1[1].x = W1[1].x - W1[2].x;                                \
    W1[1].y = W1[1].y - W1[2].y;                                \
    W1[1].z = W1[1].z - W1[2].z;                                \
                                                                \
    W0[3].x = B3[0].x;                                          \
    W0[3].y = B3[0].y;                                          \
    W0[3].z = B3[0].z;                                          \
    W0[2].x = 3*(B3[1].x - B3[0].x);                            \
    W0[2].y = 3*(B3[1].y - B3[0].y);                            \
    W0[2].z = 3*(B3[1].z - B3[0].z);                            \
    W0[1].x = 3*(B3[2].x - B3[1].x);                            \
    W0[1].y = 3*(B3[2].y - B3[1].y);                            \
    W0[1].z = 3*(B3[2].z - B3[1].z);                            \
    W0[0].x = B3[3].x - B3[0].x - W0[1].x;                      \
    W0[0].y = B3[3].y - B3[0].y - W0[1].y;                      \
    W0[0].z = B3[3].z - B3[0].z - W0[1].z;                      \
    W0[1].x = W0[1].x - W0[2].x;                                \
    W0[1].y = W0[1].y - W0[2].y;                                \
    W0[1].z = W0[1].z - W0[2].z;                                \
                                                                \
    W1[0].x = 3*(W1[0].x - W2[0].x);                            \
    W1[0].y = 3*(W1[0].y - W2[0].y);                            \
    W1[0].z = 3*(W1[0].z - W2[0].z);                            \
    W1[1].x = 3*(W1[1].x - W2[1].x);                            \
    W1[1].y = 3*(W1[1].y - W2[1].y);                            \
    W1[1].z = 3*(W1[1].z - W2[1].z);                            \
    W1[2].x = 3*(W1[2].x - W2[2].x);                            \
    W1[2].y = 3*(W1[2].y - W2[2].y);                            \
    W1[2].z = 3*(W1[2].z - W2[2].z);                            \
    W1[3].x = 3*(W1[3].x - W2[3].x);                            \
    W1[3].y = 3*(W1[3].y - W2[3].y);                            \
    W1[3].z = 3*(W1[3].z - W2[3].z);                            \
                                                                \
    W2[0].x = 3*(W2[0].x - W3[0].x);                            \
    W2[0].y = 3*(W2[0].y - W3[0].y);                            \
    W2[0].z = 3*(W2[0].z - W3[0].z);                            \
    W2[1].x = 3*(W2[1].x - W3[1].x);                            \
    W2[1].y = 3*(W2[1].y - W3[1].y);                            \
    W2[1].z = 3*(W2[1].z - W3[1].z);                            \
    W2[2].x = 3*(W2[2].x - W3[2].x);                            \
    W2[2].y = 3*(W2[2].y - W3[2].y);                            \
    W2[2].z = 3*(W2[2].z - W3[2].z);                            \
    W2[3].x = 3*(W2[3].x - W3[3].x);                            \
    W2[3].y = 3*(W2[3].y - W3[3].y);                            \
    W2[3].z = 3*(W2[3].z - W3[3].z);                            \
                                                                \
    W0[0].x = W0[0].x - W3[0].x - W1[0].x;                      \
    W0[0].y = W0[0].y - W3[0].y - W1[0].y;                      \
    W0[0].z = W0[0].z - W3[0].z - W1[0].z;                      \
    W0[1].x = W0[1].x - W3[1].x - W1[1].x;                      \
    W0[1].y = W0[1].y - W3[1].y - W1[1].y;                      \
    W0[1].z = W0[1].z - W3[1].z - W1[1].z;                      \
    W0[2].x = W0[2].x - W3[2].x - W1[2].x;                      \
    W0[2].y = W0[2].y - W3[2].y - W1[2].y;                      \
    W0[2].z = W0[2].z - W3[2].z - W1[2].z;                      \
    W0[3].x = W0[3].x - W3[3].x - W1[3].x;                      \
    W0[3].y = W0[3].y - W3[3].y - W1[3].y;                      \
    W0[3].z = W0[3].z - W3[3].z - W1[3].z;                      \
                                                                \
    W1[0].x = W1[0].x - W2[0].x;                                \
    W1[0].y = W1[0].y - W2[0].y;                                \
    W1[0].z = W1[0].z - W2[0].z;                                \
    W1[1].x = W1[1].x - W2[1].x;                                \
    W1[1].y = W1[1].y - W2[1].y;                                \
    W1[1].z = W1[1].z - W2[1].z;                                \
    W1[2].x = W1[2].x - W2[2].x;                                \
    W1[2].y = W1[2].y - W2[2].y;                                \
    W1[2].z = W1[2].z - W2[2].z;                                \
    W1[3].x = W1[3].x - W2[3].x;                                \
    W1[3].y = W1[3].y - W2[3].y;                                \
    W1[3].z = W1[3].z - W2[3].z;                                \
}                                                               \
MACRO_STOP

#define RtBezierQuadBernsteinWeight4dMacro(_W, _B)              \
MACRO_START                                                     \
{                                                               \
    RtBezierV4d        *const W0 = &(_W)[0][0];                 \
    RtBezierV4d        *const W1 = &(_W)[1][0];                 \
    RtBezierV4d        *const W2 = &(_W)[2][0];                 \
    RtBezierV4d        *const W3 = &(_W)[3][0];                 \
    RtBezierV4d        *const B0 = &(_B)[0][0];                 \
    RtBezierV4d        *const B1 = &(_B)[1][0];                 \
    RtBezierV4d        *const B2 = &(_B)[2][0];                 \
    RtBezierV4d        *const B3 = &(_B)[3][0];                 \
                                                                \
    W3[3].x = B0[0].x;                                          \
    W3[3].y = B0[0].y;                                          \
    W3[3].z = B0[0].z;                                          \
    W3[3].w = B0[0].w;                                          \
    W3[2].x = 3*(B0[1].x - B0[0].x);                            \
    W3[2].y = 3*(B0[1].y - B0[0].y);                            \
    W3[2].z = 3*(B0[1].z - B0[0].z);                            \
    W3[2].w = 3*(B0[1].w - B0[0].w);                            \
    W3[1].x = 3*(B0[2].x - B0[1].x);                            \
    W3[1].y = 3*(B0[2].y - B0[1].y);                            \
    W3[1].z = 3*(B0[2].z - B0[1].z);                            \
    W3[1].w = 3*(B0[2].w - B0[1].w);                            \
    W3[0].x = B0[3].x - B0[0].x - W3[1].x;                      \
    W3[0].y = B0[3].y - B0[0].y - W3[1].y;                      \
    W3[0].z = B0[3].z - B0[0].z - W3[1].z;                      \
    W3[0].w = B0[3].w - B0[0].w - W3[1].w;                      \
    W3[1].x = W3[1].x - W3[2].x;                                \
    W3[1].y = W3[1].y - W3[2].y;                                \
    W3[1].z = W3[1].z - W3[2].z;                                \
    W3[1].w = W3[1].w - W3[2].w;                                \
                                                                \
    W2[3].x = B1[0].x;                                          \
    W2[3].y = B1[0].y;                                          \
    W2[3].z = B1[0].z;                                          \
    W2[3].w = B1[0].w;                                          \
    W2[2].x = 3*(B1[1].x - B1[0].x);                            \
    W2[2].y = 3*(B1[1].y - B1[0].y);                            \
    W2[2].z = 3*(B1[1].z - B1[0].z);                            \
    W2[2].w = 3*(B1[1].w - B1[0].w);                            \
    W2[1].x = 3*(B1[2].x - B1[1].x);                            \
    W2[1].y = 3*(B1[2].y - B1[1].y);                            \
    W2[1].z = 3*(B1[2].z - B1[1].z);                            \
    W2[1].w = 3*(B1[2].w - B1[1].w);                            \
    W2[0].x = B1[3].x - B1[0].x - W2[1].x;                      \
    W2[0].y = B1[3].y - B1[0].y - W2[1].y;                      \
    W2[0].z = B1[3].z - B1[0].z - W2[1].z;                      \
    W2[0].w = B1[3].w - B1[0].w - W2[1].w;                      \
    W2[1].x = W2[1].x - W2[2].x;                                \
    W2[1].y = W2[1].y - W2[2].y;                                \
    W2[1].z = W2[1].z - W2[2].z;                                \
    W2[1].w = W2[1].w - W2[2].w;                                \
                                                                \
    W1[3].x = B2[0].x;                                          \
    W1[3].y = B2[0].y;                                          \
    W1[3].z = B2[0].z;                                          \
    W1[3].w = B2[0].w;                                          \
    W1[2].x = 3*(B2[1].x - B2[0].x);                            \
    W1[2].y = 3*(B2[1].y - B2[0].y);                            \
    W1[2].z = 3*(B2[1].z - B2[0].z);                            \
    W1[2].w = 3*(B2[1].w - B2[0].w);                            \
    W1[1].x = 3*(B2[2].x - B2[1].x);                            \
    W1[1].y = 3*(B2[2].y - B2[1].y);                            \
    W1[1].z = 3*(B2[2].z - B2[1].z);                            \
    W1[1].w = 3*(B2[2].w - B2[1].w);                            \
    W1[0].x = B2[3].x - B2[0].x - W1[1].x;                      \
    W1[0].y = B2[3].y - B2[0].y - W1[1].y;                      \
    W1[0].z = B2[3].z - B2[0].z - W1[1].z;                      \
    W1[0].w = B2[3].w - B2[0].w - W1[1].w;                      \
    W1[1].x = W1[1].x - W1[2].x;                                \
    W1[1].y = W1[1].y - W1[2].y;                                \
    W1[1].z = W1[1].z - W1[2].z;                                \
    W1[1].w = W1[1].w - W1[2].w;                                \
                                                                \
    W0[3].x = B3[0].x;                                          \
    W0[3].y = B3[0].y;                                          \
    W0[3].z = B3[0].z;                                          \
    W0[3].w = B3[0].w;                                          \
    W0[2].x = 3*(B3[1].x - B3[0].x);                            \
    W0[2].y = 3*(B3[1].y - B3[0].y);                            \
    W0[2].z = 3*(B3[1].z - B3[0].z);                            \
    W0[2].w = 3*(B3[1].w - B3[0].w);                            \
    W0[1].x = 3*(B3[2].x - B3[1].x);                            \
    W0[1].y = 3*(B3[2].y - B3[1].y);                            \
    W0[1].z = 3*(B3[2].z - B3[1].z);                            \
    W0[1].w = 3*(B3[2].w - B3[1].w);                            \
    W0[0].x = B3[3].x - B3[0].x - W0[1].x;                      \
    W0[0].y = B3[3].y - B3[0].y - W0[1].y;                      \
    W0[0].z = B3[3].z - B3[0].z - W0[1].z;                      \
    W0[0].w = B3[3].w - B3[0].w - W0[1].w;                      \
    W0[1].x = W0[1].x - W0[2].x;                                \
    W0[1].y = W0[1].y - W0[2].y;                                \
    W0[1].z = W0[1].z - W0[2].z;                                \
    W0[1].w = W0[1].w - W0[2].w;                                \
                                                                \
    W1[0].x = 3*(W1[0].x - W2[0].x);                            \
    W1[0].y = 3*(W1[0].y - W2[0].y);                            \
    W1[0].z = 3*(W1[0].z - W2[0].z);                            \
    W1[0].w = 3*(W1[0].w - W2[0].w);                            \
    W1[1].x = 3*(W1[1].x - W2[1].x);                            \
    W1[1].y = 3*(W1[1].y - W2[1].y);                            \
    W1[1].z = 3*(W1[1].z - W2[1].z);                            \
    W1[1].w = 3*(W1[1].w - W2[1].w);                            \
    W1[2].x = 3*(W1[2].x - W2[2].x);                            \
    W1[2].y = 3*(W1[2].y - W2[2].y);                            \
    W1[2].z = 3*(W1[2].z - W2[2].z);                            \
    W1[2].w = 3*(W1[2].w - W2[2].w);                            \
    W1[3].x = 3*(W1[3].x - W2[3].x);                            \
    W1[3].y = 3*(W1[3].y - W2[3].y);                            \
    W1[3].z = 3*(W1[3].z - W2[3].z);                            \
    W1[3].w = 3*(W1[3].w - W2[3].w);                            \
                                                                \
    W2[0].x = 3*(W2[0].x - W3[0].x);                            \
    W2[0].y = 3*(W2[0].y - W3[0].y);                            \
    W2[0].z = 3*(W2[0].z - W3[0].z);                            \
    W2[0].w = 3*(W2[0].w - W3[0].w);                            \
    W2[1].x = 3*(W2[1].x - W3[1].x);                            \
    W2[1].y = 3*(W2[1].y - W3[1].y);                            \
    W2[1].z = 3*(W2[1].z - W3[1].z);                            \
    W2[1].w = 3*(W2[1].w - W3[1].w);                            \
    W2[2].x = 3*(W2[2].x - W3[2].x);                            \
    W2[2].y = 3*(W2[2].y - W3[2].y);                            \
    W2[2].z = 3*(W2[2].z - W3[2].z);                            \
    W2[2].w = 3*(W2[2].w - W3[2].w);                            \
    W2[3].x = 3*(W2[3].x - W3[3].x);                            \
    W2[3].y = 3*(W2[3].y - W3[3].y);                            \
    W2[3].z = 3*(W2[3].z - W3[3].z);                            \
    W2[3].w = 3*(W2[3].w - W3[3].w);                            \
                                                                \
    W0[0].x = W0[0].x - W3[0].x - W1[0].x;                      \
    W0[0].y = W0[0].y - W3[0].y - W1[0].y;                      \
    W0[0].z = W0[0].z - W3[0].z - W1[0].z;                      \
    W0[0].w = W0[0].w - W3[0].w - W1[0].w;                      \
    W0[1].x = W0[1].x - W3[1].x - W1[1].x;                      \
    W0[1].y = W0[1].y - W3[1].y - W1[1].y;                      \
    W0[1].z = W0[1].z - W3[1].z - W1[1].z;                      \
    W0[1].w = W0[1].w - W3[1].w - W1[1].w;                      \
    W0[2].x = W0[2].x - W3[2].x - W1[2].x;                      \
    W0[2].y = W0[2].y - W3[2].y - W1[2].y;                      \
    W0[2].z = W0[2].z - W3[2].z - W1[2].z;                      \
    W0[2].w = W0[2].w - W3[2].w - W1[2].w;                      \
    W0[3].x = W0[3].x - W3[3].x - W1[3].x;                      \
    W0[3].y = W0[3].y - W3[3].y - W1[3].y;                      \
    W0[3].z = W0[3].z - W3[3].z - W1[3].z;                      \
    W0[3].w = W0[3].w - W3[3].w - W1[3].w;                      \
                                                                \
    W1[0].x = W1[0].x - W2[0].x;                                \
    W1[0].y = W1[0].y - W2[0].y;                                \
    W1[0].z = W1[0].z - W2[0].z;                                \
    W1[0].w = W1[0].w - W2[0].w;                                \
    W1[1].x = W1[1].x - W2[1].x;                                \
    W1[1].y = W1[1].y - W2[1].y;                                \
    W1[1].z = W1[1].z - W2[1].z;                                \
    W1[1].w = W1[1].w - W2[1].w;                                \
    W1[2].x = W1[2].x - W2[2].x;                                \
    W1[2].y = W1[2].y - W2[2].y;                                \
    W1[2].z = W1[2].z - W2[2].z;                                \
    W1[2].w = W1[2].w - W2[2].w;                                \
    W1[3].x = W1[3].x - W2[3].x;                                \
    W1[3].y = W1[3].y - W2[3].y;                                \
    W1[3].z = W1[3].z - W2[3].z;                                \
    W1[3].w = W1[3].w - W2[3].w;                                \
}                                                               \
MACRO_STOP

#define RtBezierQuadPointDifference3dMacro(_D, _W, _u, _v, _U, _V)      \
MACRO_START                                                             \
{                                                                       \
    const RwReal        u1 = (_u);                                      \
    const RwReal        U1 = (_U);                                      \
    const RwReal        up = U1 * U1;                                   \
    const RwReal        uq = u1 + U1;                                   \
    const RwReal        ru = up + up;                                   \
    const RwReal        su = 3 * uq;                                    \
    const RwReal        tu = 3 * U1 * ru;                               \
    const RwReal        pu = up + u1 * su;                              \
    const RwReal        qu = uq + u1;                                   \
    const RwReal        v1 = (_v);                                      \
    const RwReal        V1 = (_V);                                      \
    const RwReal        vp = V1 * V1;                                   \
    const RwReal        vq = v1 + V1;                                   \
    const RwReal        rv = vp + vp;                                   \
    const RwReal        sv = 3 * vq;                                    \
    const RwReal        tv = 3 * V1 * rv;                               \
    const RwReal        pv = vp + v1 * sv;                              \
    const RwReal        qv = vq + v1;                                   \
    RtBezierV4d        *const D0 = &(_D)[0][0];                         \
    RtBezierV4d        *const D1 = &(_D)[1][0];                         \
    RtBezierV4d        *const D2 = &(_D)[2][0];                         \
    RtBezierV4d        *const D3 = &(_D)[3][0];                         \
    const RtBezierV4d  *const W0 = &(_W)[0][0];                         \
    const RtBezierV4d  *const W1 = &(_W)[1][0];                         \
    const RtBezierV4d  *const W2 = &(_W)[2][0];                         \
    const RtBezierV4d  *const W3 = &(_W)[3][0];                         \
    RtBezierMatrix      C;                                              \
    RtBezierV4d        *const C0 = &C[0][0];                            \
    RtBezierV4d        *const C1 = &C[1][0];                            \
    RtBezierV4d        *const C2 = &C[2][0];                            \
    RtBezierV4d        *const C3 = &C[3][0];                            \
                                                                        \
    C0[0].x = ((W0[0].x * v1 + W0[1].x) * v1 + W0[2].x) * v1 + W0[3].x; \
    C0[0].y = ((W0[0].y * v1 + W0[1].y) * v1 + W0[2].y) * v1 + W0[3].y; \
    C0[0].z = ((W0[0].z * v1 + W0[1].z) * v1 + W0[2].z) * v1 + W0[3].z; \
    C0[1].x = ((W1[0].x * v1 + W1[1].x) * v1 + W1[2].x) * v1 + W1[3].x; \
    C0[1].y = ((W1[0].y * v1 + W1[1].y) * v1 + W1[2].y) * v1 + W1[3].y; \
    C0[1].z = ((W1[0].z * v1 + W1[1].z) * v1 + W1[2].z) * v1 + W1[3].z; \
    C0[2].x = ((W2[0].x * v1 + W2[1].x) * v1 + W2[2].x) * v1 + W2[3].x; \
    C0[2].y = ((W2[0].y * v1 + W2[1].y) * v1 + W2[2].y) * v1 + W2[3].y; \
    C0[2].z = ((W2[0].z * v1 + W2[1].z) * v1 + W2[2].z) * v1 + W2[3].z; \
    C0[3].x = ((W3[0].x * v1 + W3[1].x) * v1 + W3[2].x) * v1 + W3[3].x; \
    C0[3].y = ((W3[0].y * v1 + W3[1].y) * v1 + W3[2].y) * v1 + W3[3].y; \
    C0[3].z = ((W3[0].z * v1 + W3[1].z) * v1 + W3[2].z) * v1 + W3[3].z; \
                                                                        \
    C1[0].x = V1 * (W0[0].x * pv + W0[1].x * qv + W0[2].x);             \
    C1[0].y = V1 * (W0[0].y * pv + W0[1].y * qv + W0[2].y);             \
    C1[0].z = V1 * (W0[0].z * pv + W0[1].z * qv + W0[2].z);             \
    C1[1].x = V1 * (W1[0].x * pv + W1[1].x * qv + W1[2].x);             \
    C1[1].y = V1 * (W1[0].y * pv + W1[1].y * qv + W1[2].y);             \
    C1[1].z = V1 * (W1[0].z * pv + W1[1].z * qv + W1[2].z);             \
    C1[2].x = V1 * (W2[0].x * pv + W2[1].x * qv + W2[2].x);             \
    C1[2].y = V1 * (W2[0].y * pv + W2[1].y * qv + W2[2].y);             \
    C1[2].z = V1 * (W2[0].z * pv + W2[1].z * qv + W2[2].z);             \
    C1[3].x = V1 * (W3[0].x * pv + W3[1].x * qv + W3[2].x);             \
    C1[3].y = V1 * (W3[0].y * pv + W3[1].y * qv + W3[2].y);             \
    C1[3].z = V1 * (W3[0].z * pv + W3[1].z * qv + W3[2].z);             \
                                                                        \
    C2[0].x = rv * (W0[0].x * sv + W0[1].x);                            \
    C2[0].y = rv * (W0[0].y * sv + W0[1].y);                            \
    C2[0].z = rv * (W0[0].z * sv + W0[1].z);                            \
    C2[1].x = rv * (W1[0].x * sv + W1[1].x);                            \
    C2[1].y = rv * (W1[0].y * sv + W1[1].y);                            \
    C2[1].z = rv * (W1[0].z * sv + W1[1].z);                            \
    C2[2].x = rv * (W2[0].x * sv + W2[1].x);                            \
    C2[2].y = rv * (W2[0].y * sv + W2[1].y);                            \
    C2[2].z = rv * (W2[0].z * sv + W2[1].z);                            \
    C2[3].x = rv * (W3[0].x * sv + W3[1].x);                            \
    C2[3].y = rv * (W3[0].y * sv + W3[1].y);                            \
    C2[3].z = rv * (W3[0].z * sv + W3[1].z);                            \
                                                                        \
    C3[0].x = tv * W0[0].x;                                             \
    C3[0].y = tv * W0[0].y;                                             \
    C3[0].z = tv * W0[0].z;                                             \
    C3[1].x = tv * W1[0].x;                                             \
    C3[1].y = tv * W1[0].y;                                             \
    C3[1].z = tv * W1[0].z;                                             \
    C3[2].x = tv * W2[0].x;                                             \
    C3[2].y = tv * W2[0].y;                                             \
    C3[2].z = tv * W2[0].z;                                             \
    C3[3].x = tv * W3[0].x;                                             \
    C3[3].y = tv * W3[0].y;                                             \
    C3[3].z = tv * W3[0].z;                                             \
                                                                        \
    D0[0].x = ((C0[0].x * u1 + C0[1].x) * u1 + C0[2].x) * u1 + C0[3].x; \
    D0[0].y = ((C0[0].y * u1 + C0[1].y) * u1 + C0[2].y) * u1 + C0[3].y; \
    D0[0].z = ((C0[0].z * u1 + C0[1].z) * u1 + C0[2].z) * u1 + C0[3].z; \
    D0[1].x = U1 * (C0[0].x * pu + C0[1].x * qu + C0[2].x);             \
    D0[1].y = U1 * (C0[0].y * pu + C0[1].y * qu + C0[2].y);             \
    D0[1].z = U1 * (C0[0].z * pu + C0[1].z * qu + C0[2].z);             \
    D0[2].x = ru * (C0[0].x * su + C0[1].x);                            \
    D0[2].y = ru * (C0[0].y * su + C0[1].y);                            \
    D0[2].z = ru * (C0[0].z * su + C0[1].z);                            \
    D0[3].x = tu * C0[0].x;                                             \
    D0[3].y = tu * C0[0].y;                                             \
    D0[3].z = tu * C0[0].z;                                             \
                                                                        \
    D1[0].x = ((C1[0].x * u1 + C1[1].x) * u1 + C1[2].x) * u1 + C1[3].x; \
    D1[0].y = ((C1[0].y * u1 + C1[1].y) * u1 + C1[2].y) * u1 + C1[3].y; \
    D1[0].z = ((C1[0].z * u1 + C1[1].z) * u1 + C1[2].z) * u1 + C1[3].z; \
    D1[1].x = U1 * (C1[0].x * pu + C1[1].x * qu + C1[2].x);             \
    D1[1].y = U1 * (C1[0].y * pu + C1[1].y * qu + C1[2].y);             \
    D1[1].z = U1 * (C1[0].z * pu + C1[1].z * qu + C1[2].z);             \
    D1[2].x = ru * (C1[0].x * su + C1[1].x);                            \
    D1[2].y = ru * (C1[0].y * su + C1[1].y);                            \
    D1[2].z = ru * (C1[0].z * su + C1[1].z);                            \
    D1[3].x = tu * C1[0].x;                                             \
    D1[3].y = tu * C1[0].y;                                             \
    D1[3].z = tu * C1[0].z;                                             \
                                                                        \
    D2[0].x = ((C2[0].x * u1 + C2[1].x) * u1 + C2[2].x) * u1 + C2[3].x; \
    D2[0].y = ((C2[0].y * u1 + C2[1].y) * u1 + C2[2].y) * u1 + C2[3].y; \
    D2[0].z = ((C2[0].z * u1 + C2[1].z) * u1 + C2[2].z) * u1 + C2[3].z; \
    D2[1].x = U1 * (C2[0].x * pu + C2[1].x * qu + C2[2].x);             \
    D2[1].y = U1 * (C2[0].y * pu + C2[1].y * qu + C2[2].y);             \
    D2[1].z = U1 * (C2[0].z * pu + C2[1].z * qu + C2[2].z);             \
    D2[2].x = ru * (C2[0].x * su + C2[1].x);                            \
    D2[2].y = ru * (C2[0].y * su + C2[1].y);                            \
    D2[2].z = ru * (C2[0].z * su + C2[1].z);                            \
    D2[3].x = tu * C2[0].x;                                             \
    D2[3].y = tu * C2[0].y;                                             \
    D2[3].z = tu * C2[0].z;                                             \
                                                                        \
    D3[0].x = ((C3[0].x * u1 + C3[1].x) * u1 + C3[2].x) * u1 + C3[3].x; \
    D3[0].y = ((C3[0].y * u1 + C3[1].y) * u1 + C3[2].y) * u1 + C3[3].y; \
    D3[0].z = ((C3[0].z * u1 + C3[1].z) * u1 + C3[2].z) * u1 + C3[3].z; \
    D3[1].x = U1 * (C3[0].x * pu + C3[1].x * qu + C3[2].x);             \
    D3[1].y = U1 * (C3[0].y * pu + C3[1].y * qu + C3[2].y);             \
    D3[1].z = U1 * (C3[0].z * pu + C3[1].z * qu + C3[2].z);             \
    D3[2].x = ru * (C3[0].x * su + C3[1].x);                            \
    D3[2].y = ru * (C3[0].y * su + C3[1].y);                            \
    D3[2].z = ru * (C3[0].z * su + C3[1].z);                            \
    D3[3].x = tu * C3[0].x;                                             \
    D3[3].y = tu * C3[0].y;                                             \
    D3[3].z = tu * C3[0].z;                                             \
}                                                                       \
MACRO_STOP

#define RtBezierQuadPointDifference4dMacro(_D, _W, _u, _v, _U, _V)      \
MACRO_START                                                             \
{                                                                       \
    const RwReal        u1 = (_u);                                      \
    const RwReal        U1 = (_U);                                      \
    const RwReal        up = U1 * U1;                                   \
    const RwReal        uq = u1 + U1;                                   \
    const RwReal        ru = up + up;                                   \
    const RwReal        su = 3 * uq;                                    \
    const RwReal        tu = 3 * U1 * ru;                               \
    const RwReal        pu = up + u1 * su;                              \
    const RwReal        qu = uq + u1;                                   \
    const RwReal        v1 = (_v);                                      \
    const RwReal        V1 = (_V);                                      \
    const RwReal        vp = V1 * V1;                                   \
    const RwReal        vq = v1 + V1;                                   \
    const RwReal        rv = vp + vp;                                   \
    const RwReal        sv = 3 * vq;                                    \
    const RwReal        tv = 3 * V1 * rv;                               \
    const RwReal        pv = vp + v1 * sv;                              \
    const RwReal        qv = vq + v1;                                   \
    RtBezierV4d        *const D0 = &(_D)[0][0];                         \
    RtBezierV4d        *const D1 = &(_D)[1][0];                         \
    RtBezierV4d        *const D2 = &(_D)[2][0];                         \
    RtBezierV4d        *const D3 = &(_D)[3][0];                         \
    const RtBezierV4d  *const W0 = &(_W)[0][0];                         \
    const RtBezierV4d  *const W1 = &(_W)[1][0];                         \
    const RtBezierV4d  *const W2 = &(_W)[2][0];                         \
    const RtBezierV4d  *const W3 = &(_W)[3][0];                         \
    RtBezierMatrix      C;                                              \
    RtBezierV4d        *const C0 = &C[0][0];                            \
    RtBezierV4d        *const C1 = &C[1][0];                            \
    RtBezierV4d        *const C2 = &C[2][0];                            \
    RtBezierV4d        *const C3 = &C[3][0];                            \
                                                                        \
                                                                        \
    C0[0].x = ((W0[0].x * v1 + W0[1].x) * v1 + W0[2].x) * v1 + W0[3].x; \
    C0[0].y = ((W0[0].y * v1 + W0[1].y) * v1 + W0[2].y) * v1 + W0[3].y; \
    C0[0].z = ((W0[0].z * v1 + W0[1].z) * v1 + W0[2].z) * v1 + W0[3].z; \
    C0[0].w = ((W0[0].w * v1 + W0[1].w) * v1 + W0[2].w) * v1 + W0[3].w; \
    C0[1].x = ((W1[0].x * v1 + W1[1].x) * v1 + W1[2].x) * v1 + W1[3].x; \
    C0[1].y = ((W1[0].y * v1 + W1[1].y) * v1 + W1[2].y) * v1 + W1[3].y; \
    C0[1].z = ((W1[0].z * v1 + W1[1].z) * v1 + W1[2].z) * v1 + W1[3].z; \
    C0[1].w = ((W1[0].w * v1 + W1[1].w) * v1 + W1[2].w) * v1 + W1[3].w; \
    C0[2].x = ((W2[0].x * v1 + W2[1].x) * v1 + W2[2].x) * v1 + W2[3].x; \
    C0[2].y = ((W2[0].y * v1 + W2[1].y) * v1 + W2[2].y) * v1 + W2[3].y; \
    C0[2].z = ((W2[0].z * v1 + W2[1].z) * v1 + W2[2].z) * v1 + W2[3].z; \
    C0[2].w = ((W2[0].w * v1 + W2[1].w) * v1 + W2[2].w) * v1 + W2[3].w; \
    C0[3].x = ((W3[0].x * v1 + W3[1].x) * v1 + W3[2].x) * v1 + W3[3].x; \
    C0[3].y = ((W3[0].y * v1 + W3[1].y) * v1 + W3[2].y) * v1 + W3[3].y; \
    C0[3].z = ((W3[0].z * v1 + W3[1].z) * v1 + W3[2].z) * v1 + W3[3].z; \
    C0[3].w = ((W3[0].w * v1 + W3[1].w) * v1 + W3[2].w) * v1 + W3[3].w; \
                                                                        \
    C1[0].x = V1 * (W0[0].x * pv + W0[1].x * qv + W0[2].x);             \
    C1[0].y = V1 * (W0[0].y * pv + W0[1].y * qv + W0[2].y);             \
    C1[0].z = V1 * (W0[0].z * pv + W0[1].z * qv + W0[2].z);             \
    C1[0].w = V1 * (W0[0].w * pv + W0[1].w * qv + W0[2].w);             \
    C1[1].x = V1 * (W1[0].x * pv + W1[1].x * qv + W1[2].x);             \
    C1[1].y = V1 * (W1[0].y * pv + W1[1].y * qv + W1[2].y);             \
    C1[1].z = V1 * (W1[0].z * pv + W1[1].z * qv + W1[2].z);             \
    C1[1].w = V1 * (W1[0].w * pv + W1[1].w * qv + W1[2].w);             \
    C1[2].x = V1 * (W2[0].x * pv + W2[1].x * qv + W2[2].x);             \
    C1[2].y = V1 * (W2[0].y * pv + W2[1].y * qv + W2[2].y);             \
    C1[2].z = V1 * (W2[0].z * pv + W2[1].z * qv + W2[2].z);             \
    C1[2].w = V1 * (W2[0].w * pv + W2[1].w * qv + W2[2].w);             \
    C1[3].x = V1 * (W3[0].x * pv + W3[1].x * qv + W3[2].x);             \
    C1[3].y = V1 * (W3[0].y * pv + W3[1].y * qv + W3[2].y);             \
    C1[3].z = V1 * (W3[0].z * pv + W3[1].z * qv + W3[2].z);             \
    C1[3].w = V1 * (W3[0].w * pv + W3[1].w * qv + W3[2].w);             \
                                                                        \
    C2[0].x = rv * (W0[0].x * sv + W0[1].x);                            \
    C2[0].y = rv * (W0[0].y * sv + W0[1].y);                            \
    C2[0].z = rv * (W0[0].z * sv + W0[1].z);                            \
    C2[0].w = rv * (W0[0].w * sv + W0[1].w);                            \
    C2[1].x = rv * (W1[0].x * sv + W1[1].x);                            \
    C2[1].y = rv * (W1[0].y * sv + W1[1].y);                            \
    C2[1].z = rv * (W1[0].z * sv + W1[1].z);                            \
    C2[1].w = rv * (W1[0].w * sv + W1[1].w);                            \
    C2[2].x = rv * (W2[0].x * sv + W2[1].x);                            \
    C2[2].y = rv * (W2[0].y * sv + W2[1].y);                            \
    C2[2].z = rv * (W2[0].z * sv + W2[1].z);                            \
    C2[2].w = rv * (W2[0].w * sv + W2[1].w);                            \
    C2[3].x = rv * (W3[0].x * sv + W3[1].x);                            \
    C2[3].y = rv * (W3[0].y * sv + W3[1].y);                            \
    C2[3].z = rv * (W3[0].z * sv + W3[1].z);                            \
    C2[3].w = rv * (W3[0].w * sv + W3[1].w);                            \
                                                                        \
    C3[0].x = tv * W0[0].x;                                             \
    C3[0].y = tv * W0[0].y;                                             \
    C3[0].z = tv * W0[0].z;                                             \
    C3[0].w = tv * W0[0].w;                                             \
    C3[1].x = tv * W1[0].x;                                             \
    C3[1].y = tv * W1[0].y;                                             \
    C3[1].z = tv * W1[0].z;                                             \
    C3[1].w = tv * W1[0].w;                                             \
    C3[2].x = tv * W2[0].x;                                             \
    C3[2].y = tv * W2[0].y;                                             \
    C3[2].z = tv * W2[0].z;                                             \
    C3[2].w = tv * W2[0].w;                                             \
    C3[3].x = tv * W3[0].x;                                             \
    C3[3].y = tv * W3[0].y;                                             \
    C3[3].z = tv * W3[0].z;                                             \
    C3[3].w = tv * W3[0].w;                                             \
                                                                        \
    D0[0].x = ((C0[0].x * u1 + C0[1].x) * u1 + C0[2].x) * u1 + C0[3].x; \
    D0[0].y = ((C0[0].y * u1 + C0[1].y) * u1 + C0[2].y) * u1 + C0[3].y; \
    D0[0].z = ((C0[0].z * u1 + C0[1].z) * u1 + C0[2].z) * u1 + C0[3].z; \
    D0[0].w = ((C0[0].w * u1 + C0[1].w) * u1 + C0[2].w) * u1 + C0[3].w; \
    D0[1].x = U1 * (C0[0].x * pu + C0[1].x * qu + C0[2].x);             \
    D0[1].y = U1 * (C0[0].y * pu + C0[1].y * qu + C0[2].y);             \
    D0[1].z = U1 * (C0[0].z * pu + C0[1].z * qu + C0[2].z);             \
    D0[1].w = U1 * (C0[0].w * pu + C0[1].w * qu + C0[2].w);             \
    D0[2].x = ru * (C0[0].x * su + C0[1].x);                            \
    D0[2].y = ru * (C0[0].y * su + C0[1].y);                            \
    D0[2].z = ru * (C0[0].z * su + C0[1].z);                            \
    D0[2].w = ru * (C0[0].w * su + C0[1].w);                            \
    D0[3].x = tu * C0[0].x;                                             \
    D0[3].y = tu * C0[0].y;                                             \
    D0[3].z = tu * C0[0].z;                                             \
    D0[3].w = tu * C0[0].w;                                             \
                                                                        \
    D1[0].x = ((C1[0].x * u1 + C1[1].x) * u1 + C1[2].x) * u1 + C1[3].x; \
    D1[0].y = ((C1[0].y * u1 + C1[1].y) * u1 + C1[2].y) * u1 + C1[3].y; \
    D1[0].z = ((C1[0].z * u1 + C1[1].z) * u1 + C1[2].z) * u1 + C1[3].z; \
    D1[0].w = ((C1[0].w * u1 + C1[1].w) * u1 + C1[2].w) * u1 + C1[3].w; \
    D1[1].x = U1 * (C1[0].x * pu + C1[1].x * qu + C1[2].x);             \
    D1[1].y = U1 * (C1[0].y * pu + C1[1].y * qu + C1[2].y);             \
    D1[1].z = U1 * (C1[0].z * pu + C1[1].z * qu + C1[2].z);             \
    D1[1].w = U1 * (C1[0].w * pu + C1[1].w * qu + C1[2].w);             \
    D1[2].x = ru * (C1[0].x * su + C1[1].x);                            \
    D1[2].y = ru * (C1[0].y * su + C1[1].y);                            \
    D1[2].z = ru * (C1[0].z * su + C1[1].z);                            \
    D1[2].w = ru * (C1[0].w * su + C1[1].w);                            \
    D1[3].x = tu * C1[0].x;                                             \
    D1[3].y = tu * C1[0].y;                                             \
    D1[3].z = tu * C1[0].z;                                             \
    D1[3].w = tu * C1[0].w;                                             \
                                                                        \
    D2[0].x = ((C2[0].x * u1 + C2[1].x) * u1 + C2[2].x) * u1 + C2[3].x; \
    D2[0].y = ((C2[0].y * u1 + C2[1].y) * u1 + C2[2].y) * u1 + C2[3].y; \
    D2[0].z = ((C2[0].z * u1 + C2[1].z) * u1 + C2[2].z) * u1 + C2[3].z; \
    D2[0].w = ((C2[0].w * u1 + C2[1].w) * u1 + C2[2].w) * u1 + C2[3].w; \
    D2[1].x = U1 * (C2[0].x * pu + C2[1].x * qu + C2[2].x);             \
    D2[1].y = U1 * (C2[0].y * pu + C2[1].y * qu + C2[2].y);             \
    D2[1].z = U1 * (C2[0].z * pu + C2[1].z * qu + C2[2].z);             \
    D2[1].w = U1 * (C2[0].w * pu + C2[1].w * qu + C2[2].w);             \
    D2[2].x = ru * (C2[0].x * su + C2[1].x);                            \
    D2[2].y = ru * (C2[0].y * su + C2[1].y);                            \
    D2[2].z = ru * (C2[0].z * su + C2[1].z);                            \
    D2[2].w = ru * (C2[0].w * su + C2[1].w);                            \
    D2[3].x = tu * C2[0].x;                                             \
    D2[3].y = tu * C2[0].y;                                             \
    D2[3].z = tu * C2[0].z;                                             \
    D2[3].w = tu * C2[0].w;                                             \
                                                                        \
    D3[0].x = ((C3[0].x * u1 + C3[1].x) * u1 + C3[2].x) * u1 + C3[3].x; \
    D3[0].y = ((C3[0].y * u1 + C3[1].y) * u1 + C3[2].y) * u1 + C3[3].y; \
    D3[0].z = ((C3[0].z * u1 + C3[1].z) * u1 + C3[2].z) * u1 + C3[3].z; \
    D3[0].w = ((C3[0].w * u1 + C3[1].w) * u1 + C3[2].w) * u1 + C3[3].w; \
    D3[1].x = U1 * (C3[0].x * pu + C3[1].x * qu + C3[2].x);             \
    D3[1].y = U1 * (C3[0].y * pu + C3[1].y * qu + C3[2].y);             \
    D3[1].z = U1 * (C3[0].z * pu + C3[1].z * qu + C3[2].z);             \
    D3[1].w = U1 * (C3[0].w * pu + C3[1].w * qu + C3[2].w);             \
    D3[2].x = ru * (C3[0].x * su + C3[1].x);                            \
    D3[2].y = ru * (C3[0].y * su + C3[1].y);                            \
    D3[2].z = ru * (C3[0].z * su + C3[1].z);                            \
    D3[2].w = ru * (C3[0].w * su + C3[1].w);                            \
    D3[3].x = tu * C3[0].x;                                             \
    D3[3].y = tu * C3[0].y;                                             \
    D3[3].z = tu * C3[0].z;                                             \
    D3[3].w = tu * C3[0].w;                                             \
}                                                                       \
MACRO_STOP

#define RtBezierQuadOriginDifference3dMacro(_D, _W, _U, _V)     \
MACRO_START                                                     \
{                                                               \
    const RwReal        U1 = ((_U));                            \
    const RwReal        U2 = (U1*U1);                           \
    const RwReal        U3 = (U2*U1);                           \
    const RwReal        V1 = ((_V));                            \
    const RwReal        V1U1 = (V1*U1);                         \
    const RwReal        V1U2 = (V1*U2);                         \
    const RwReal        V1U3 = (V1*U3);                         \
    const RwReal        V2 = (V1*V1);                           \
    const RwReal        V2U1 = (V2*U1);                         \
    const RwReal        V2U2 = (V2*U2);                         \
    const RwReal        V2U3 = (V2*U3);                         \
    const RwReal        V3 = (V2*V1);                           \
    const RwReal        V3U1 = (V3*U1);                         \
    const RwReal        V3U2 = (V3*U2);                         \
    const RwReal        V3U3 = (V3*U3);                         \
    RtBezierV4d        *const D0 = &(_D)[0][0];                 \
    RtBezierV4d        *const D1 = &(_D)[1][0];                 \
    RtBezierV4d        *const D2 = &(_D)[2][0];                 \
    RtBezierV4d        *const D3 = &(_D)[3][0];                 \
    const RtBezierV4d  *const W0 = &(_W)[0][0];                 \
    const RtBezierV4d  *const W1 = &(_W)[1][0];                 \
    const RtBezierV4d  *const W2 = &(_W)[2][0];                 \
    const RtBezierV4d  *const W3 = &(_W)[3][0];                 \
                                                                \
    D1[0].x = V3 * W3[0].x;                                     \
    D1[0].y = V3 * W3[0].y;                                     \
    D1[0].z = V3 * W3[0].z;                                     \
    D1[1].x = V3U3 * W0[0].x;                                   \
    D1[1].y = V3U3 * W0[0].y;                                   \
    D1[1].z = V3U3 * W0[0].z;                                   \
    D1[2].x = V3U2 * W1[0].x;                                   \
    D1[2].y = V3U2 * W1[0].y;                                   \
    D1[2].z = V3U2 * W1[0].z;                                   \
    D1[3].x = 6 * D1[1].x;                                      \
    D1[3].y = 6 * D1[1].y;                                      \
    D1[3].z = 6 * D1[1].z;                                      \
    D1[1].x = D1[1].x + D1[2].x + V3U1 * W2[0].x;               \
    D1[1].y = D1[1].y + D1[2].y + V3U1 * W2[0].y;               \
    D1[1].z = D1[1].z + D1[2].z + V3U1 * W2[0].z;               \
    D1[2].x = D1[2].x + D1[2].x + D1[3].x;                      \
    D1[2].y = D1[2].y + D1[2].y + D1[3].y;                      \
    D1[2].z = D1[2].z + D1[2].z + D1[3].z;                      \
                                                                \
    D2[0].x = V2 * W3[1].x;                                     \
    D2[0].y = V2 * W3[1].y;                                     \
    D2[0].z = V2 * W3[1].z;                                     \
    D2[1].x = V2U3 * W0[1].x;                                   \
    D2[1].y = V2U3 * W0[1].y;                                   \
    D2[1].z = V2U3 * W0[1].z;                                   \
    D2[2].x = V2U2 * W1[1].x;                                   \
    D2[2].y = V2U2 * W1[1].y;                                   \
    D2[2].z = V2U2 * W1[1].z;                                   \
    D2[3].x = 6 * D2[1].x;                                      \
    D2[3].y = 6 * D2[1].y;                                      \
    D2[3].z = 6 * D2[1].z;                                      \
    D2[1].x = D2[1].x + D2[2].x + V2U1 * W2[1].x;               \
    D2[1].y = D2[1].y + D2[2].y + V2U1 * W2[1].y;               \
    D2[1].z = D2[1].z + D2[2].z + V2U1 * W2[1].z;               \
    D2[2].x = D2[2].x + D2[2].x + D2[3].x;                      \
    D2[2].y = D2[2].y + D2[2].y + D2[3].y;                      \
    D2[2].z = D2[2].z + D2[2].z + D2[3].z;                      \
                                                                \
    D3[0].x = 6 * D1[0].x;                                      \
    D3[0].y = 6 * D1[0].y;                                      \
    D3[0].z = 6 * D1[0].z;                                      \
    D3[1].x = 6 * D1[1].x;                                      \
    D3[1].y = 6 * D1[1].y;                                      \
    D3[1].z = 6 * D1[1].z;                                      \
    D3[2].x = 6 * D1[2].x;                                      \
    D3[2].y = 6 * D1[2].y;                                      \
    D3[2].z = 6 * D1[2].z;                                      \
    D3[3].x = 6 * D1[3].x;                                      \
    D3[3].y = 6 * D1[3].y;                                      \
    D3[3].z = 6 * D1[3].z;                                      \
                                                                \
    D0[0].x = V1 * W3[2].x;                                     \
    D0[0].y = V1 * W3[2].y;                                     \
    D0[0].z = V1 * W3[2].z;                                     \
    D0[1].x = V1U3 * W0[2].x;                                   \
    D0[1].y = V1U3 * W0[2].y;                                   \
    D0[1].z = V1U3 * W0[2].z;                                   \
    D0[2].x = V1U2 * W1[2].x;                                   \
    D0[2].y = V1U2 * W1[2].y;                                   \
    D0[2].z = V1U2 * W1[2].z;                                   \
    D0[3].x = 6 * D0[1].x;                                      \
    D0[3].y = 6 * D0[1].y;                                      \
    D0[3].z = 6 * D0[1].z;                                      \
    D0[1].x = D0[1].x + D0[2].x + V1U1 * W2[2].x;               \
    D0[1].y = D0[1].y + D0[2].y + V1U1 * W2[2].y;               \
    D0[1].z = D0[1].z + D0[2].z + V1U1 * W2[2].z;               \
    D0[2].x = D0[2].x + D0[2].x + D0[3].x;                      \
    D0[2].y = D0[2].y + D0[2].y + D0[3].y;                      \
    D0[2].z = D0[2].z + D0[2].z + D0[3].z;                      \
                                                                \
    D1[0].x = D1[0].x + D2[0].x + D0[0].x;                      \
    D1[0].y = D1[0].y + D2[0].y + D0[0].y;                      \
    D1[0].z = D1[0].z + D2[0].z + D0[0].z;                      \
    D1[1].x = D1[1].x + D2[1].x + D0[1].x;                      \
    D1[1].y = D1[1].y + D2[1].y + D0[1].y;                      \
    D1[1].z = D1[1].z + D2[1].z + D0[1].z;                      \
    D1[2].x = D1[2].x + D2[2].x + D0[2].x;                      \
    D1[2].y = D1[2].y + D2[2].y + D0[2].y;                      \
    D1[2].z = D1[2].z + D2[2].z + D0[2].z;                      \
    D1[3].x = D1[3].x + D2[3].x + D0[3].x;                      \
    D1[3].y = D1[3].y + D2[3].y + D0[3].y;                      \
    D1[3].z = D1[3].z + D2[3].z + D0[3].z;                      \
                                                                \
    D2[0].x = D2[0].x + D2[0].x + D3[0].x;                      \
    D2[0].y = D2[0].y + D2[0].y + D3[0].y;                      \
    D2[0].z = D2[0].z + D2[0].z + D3[0].z;                      \
    D2[1].x = D2[1].x + D2[1].x + D3[1].x;                      \
    D2[1].y = D2[1].y + D2[1].y + D3[1].y;                      \
    D2[1].z = D2[1].z + D2[1].z + D3[1].z;                      \
    D2[2].x = D2[2].x + D2[2].x + D3[2].x;                      \
    D2[2].y = D2[2].y + D2[2].y + D3[2].y;                      \
    D2[2].z = D2[2].z + D2[2].z + D3[2].z;                      \
    D2[3].x = D2[3].x + D2[3].x + D3[3].x;                      \
    D2[3].y = D2[3].y + D2[3].y + D3[3].y;                      \
    D2[3].z = D2[3].z + D2[3].z + D3[3].z;                      \
                                                                \
    D0[0].x = W3[3].x;                                          \
    D0[0].y = W3[3].y;                                          \
    D0[0].z = W3[3].z;                                          \
    D0[1].x = U3 * W0[3].x;                                     \
    D0[1].y = U3 * W0[3].y;                                     \
    D0[1].z = U3 * W0[3].z;                                     \
    D0[2].x = U2 * W1[3].x;                                     \
    D0[2].y = U2 * W1[3].y;                                     \
    D0[2].z = U2 * W1[3].z;                                     \
    D0[3].x = 6 * D0[1].x;                                      \
    D0[3].y = 6 * D0[1].y;                                      \
    D0[3].z = 6 * D0[1].z;                                      \
    D0[1].x = D0[1].x + D0[2].x + U1 * W2[3].x;                 \
    D0[1].y = D0[1].y + D0[2].y + U1 * W2[3].y;                 \
    D0[1].z = D0[1].z + D0[2].z + U1 * W2[3].z;                 \
    D0[2].x = D0[2].x + D0[2].x + D0[3].x;                      \
    D0[2].y = D0[2].y + D0[2].y + D0[3].y;                      \
    D0[2].z = D0[2].z + D0[2].z + D0[3].z;                      \
}                                                               \
MACRO_STOP

#define RtBezierQuadOriginDifference4dMacro(_D, _W, _U, _V)     \
MACRO_START                                                     \
{                                                               \
    const RwReal        U1 = ((_U));                            \
    const RwReal        U2 = (U1*U1);                           \
    const RwReal        U3 = (U2*U1);                           \
    const RwReal        V1 = ((_V));                            \
    const RwReal        V1U1 = (V1*U1);                         \
    const RwReal        V1U2 = (V1*U2);                         \
    const RwReal        V1U3 = (V1*U3);                         \
    const RwReal        V2 = (V1*V1);                           \
    const RwReal        V2U1 = (V2*U1);                         \
    const RwReal        V2U2 = (V2*U2);                         \
    const RwReal        V2U3 = (V2*U3);                         \
    const RwReal        V3 = (V2*V1);                           \
    const RwReal        V3U1 = (V3*U1);                         \
    const RwReal        V3U2 = (V3*U2);                         \
    const RwReal        V3U3 = (V3*U3);                         \
    RtBezierV4d        *const D0 = &(_D)[0][0];                 \
    RtBezierV4d        *const D1 = &(_D)[1][0];                 \
    RtBezierV4d        *const D2 = &(_D)[2][0];                 \
    RtBezierV4d        *const D3 = &(_D)[3][0];                 \
    const RtBezierV4d  *const W0 = &(_W)[0][0];                 \
    const RtBezierV4d  *const W1 = &(_W)[1][0];                 \
    const RtBezierV4d  *const W2 = &(_W)[2][0];                 \
    const RtBezierV4d  *const W3 = &(_W)[3][0];                 \
                                                                \
    D1[0].x = V3 * W3[0].x;                                     \
    D1[0].y = V3 * W3[0].y;                                     \
    D1[0].z = V3 * W3[0].z;                                     \
    D1[0].w = V3 * W3[0].w;                                     \
    D1[1].x = V3U3 * W0[0].x;                                   \
    D1[1].y = V3U3 * W0[0].y;                                   \
    D1[1].z = V3U3 * W0[0].z;                                   \
    D1[1].w = V3U3 * W0[0].w;                                   \
    D1[2].x = V3U2 * W1[0].x;                                   \
    D1[2].y = V3U2 * W1[0].y;                                   \
    D1[2].z = V3U2 * W1[0].z;                                   \
    D1[2].w = V3U2 * W1[0].w;                                   \
    D1[3].x = 6 * D1[1].x;                                      \
    D1[3].y = 6 * D1[1].y;                                      \
    D1[3].z = 6 * D1[1].z;                                      \
    D1[3].w = 6 * D1[1].w;                                      \
    D1[1].x = D1[1].x + D1[2].x + V3U1 * W2[0].x;               \
    D1[1].y = D1[1].y + D1[2].y + V3U1 * W2[0].y;               \
    D1[1].z = D1[1].z + D1[2].z + V3U1 * W2[0].z;               \
    D1[1].w = D1[1].w + D1[2].w + V3U1 * W2[0].w;               \
    D1[2].x = D1[2].x + D1[2].x + D1[3].x;                      \
    D1[2].y = D1[2].y + D1[2].y + D1[3].y;                      \
    D1[2].z = D1[2].z + D1[2].z + D1[3].z;                      \
    D1[2].w = D1[2].w + D1[2].w + D1[3].w;                      \
                                                                \
    D2[0].x = V2 * W3[1].x;                                     \
    D2[0].y = V2 * W3[1].y;                                     \
    D2[0].z = V2 * W3[1].z;                                     \
    D2[0].w = V2 * W3[1].w;                                     \
    D2[1].x = V2U3 * W0[1].x;                                   \
    D2[1].y = V2U3 * W0[1].y;                                   \
    D2[1].z = V2U3 * W0[1].z;                                   \
    D2[1].w = V2U3 * W0[1].w;                                   \
    D2[2].x = V2U2 * W1[1].x;                                   \
    D2[2].y = V2U2 * W1[1].y;                                   \
    D2[2].z = V2U2 * W1[1].z;                                   \
    D2[2].w = V2U2 * W1[1].w;                                   \
    D2[3].x = 6 * D2[1].x;                                      \
    D2[3].y = 6 * D2[1].y;                                      \
    D2[3].z = 6 * D2[1].z;                                      \
    D2[3].w = 6 * D2[1].w;                                      \
    D2[1].x = D2[1].x + D2[2].x + V2U1 * W2[1].x;               \
    D2[1].y = D2[1].y + D2[2].y + V2U1 * W2[1].y;               \
    D2[1].z = D2[1].z + D2[2].z + V2U1 * W2[1].z;               \
    D2[1].w = D2[1].w + D2[2].w + V2U1 * W2[1].w;               \
    D2[2].x = D2[2].x + D2[2].x + D2[3].x;                      \
    D2[2].y = D2[2].y + D2[2].y + D2[3].y;                      \
    D2[2].z = D2[2].z + D2[2].z + D2[3].z;                      \
    D2[2].w = D2[2].w + D2[2].w + D2[3].w;                      \
                                                                \
    D3[0].x = 6 * D1[0].x;                                      \
    D3[0].y = 6 * D1[0].y;                                      \
    D3[0].z = 6 * D1[0].z;                                      \
    D3[0].w = 6 * D1[0].w;                                      \
    D3[1].x = 6 * D1[1].x;                                      \
    D3[1].y = 6 * D1[1].y;                                      \
    D3[1].z = 6 * D1[1].z;                                      \
    D3[1].w = 6 * D1[1].w;                                      \
    D3[2].x = 6 * D1[2].x;                                      \
    D3[2].y = 6 * D1[2].y;                                      \
    D3[2].z = 6 * D1[2].z;                                      \
    D3[2].w = 6 * D1[2].w;                                      \
    D3[3].x = 6 * D1[3].x;                                      \
    D3[3].y = 6 * D1[3].y;                                      \
    D3[3].z = 6 * D1[3].z;                                      \
    D3[3].w = 6 * D1[3].w;                                      \
                                                                \
    D0[0].x = V1 * W3[2].x;                                     \
    D0[0].y = V1 * W3[2].y;                                     \
    D0[0].z = V1 * W3[2].z;                                     \
    D0[0].w = V1 * W3[2].w;                                     \
    D0[1].x = V1U3 * W0[2].x;                                   \
    D0[1].y = V1U3 * W0[2].y;                                   \
    D0[1].z = V1U3 * W0[2].z;                                   \
    D0[1].w = V1U3 * W0[2].w;                                   \
    D0[2].x = V1U2 * W1[2].x;                                   \
    D0[2].y = V1U2 * W1[2].y;                                   \
    D0[2].z = V1U2 * W1[2].z;                                   \
    D0[2].w = V1U2 * W1[2].w;                                   \
    D0[3].x = 6 * D0[1].x;                                      \
    D0[3].y = 6 * D0[1].y;                                      \
    D0[3].z = 6 * D0[1].z;                                      \
    D0[3].w = 6 * D0[1].w;                                      \
    D0[1].x = D0[1].x + D0[2].x + V1U1 * W2[2].x;               \
    D0[1].y = D0[1].y + D0[2].y + V1U1 * W2[2].y;               \
    D0[1].z = D0[1].z + D0[2].z + V1U1 * W2[2].z;               \
    D0[1].w = D0[1].w + D0[2].w + V1U1 * W2[2].w;               \
    D0[2].x = D0[2].x + D0[2].x + D0[3].x;                      \
    D0[2].y = D0[2].y + D0[2].y + D0[3].y;                      \
    D0[2].z = D0[2].z + D0[2].z + D0[3].z;                      \
    D0[2].w = D0[2].w + D0[2].w + D0[3].w;                      \
                                                                \
    D1[0].x = D1[0].x + D2[0].x + D0[0].x;                      \
    D1[0].y = D1[0].y + D2[0].y + D0[0].y;                      \
    D1[0].z = D1[0].z + D2[0].z + D0[0].z;                      \
    D1[0].w = D1[0].w + D2[0].w + D0[0].w;                      \
    D1[1].x = D1[1].x + D2[1].x + D0[1].x;                      \
    D1[1].y = D1[1].y + D2[1].y + D0[1].y;                      \
    D1[1].z = D1[1].z + D2[1].z + D0[1].z;                      \
    D1[1].w = D1[1].w + D2[1].w + D0[1].w;                      \
    D1[2].x = D1[2].x + D2[2].x + D0[2].x;                      \
    D1[2].y = D1[2].y + D2[2].y + D0[2].y;                      \
    D1[2].z = D1[2].z + D2[2].z + D0[2].z;                      \
    D1[2].w = D1[2].w + D2[2].w + D0[2].w;                      \
    D1[3].x = D1[3].x + D2[3].x + D0[3].x;                      \
    D1[3].y = D1[3].y + D2[3].y + D0[3].y;                      \
    D1[3].z = D1[3].z + D2[3].z + D0[3].z;                      \
    D1[3].w = D1[3].w + D2[3].w + D0[3].w;                      \
                                                                \
    D2[0].x = D2[0].x + D2[0].x + D3[0].x;                      \
    D2[0].y = D2[0].y + D2[0].y + D3[0].y;                      \
    D2[0].z = D2[0].z + D2[0].z + D3[0].z;                      \
    D2[0].w = D2[0].w + D2[0].w + D3[0].w;                      \
    D2[1].x = D2[1].x + D2[1].x + D3[1].x;                      \
    D2[1].y = D2[1].y + D2[1].y + D3[1].y;                      \
    D2[1].z = D2[1].z + D2[1].z + D3[1].z;                      \
    D2[1].w = D2[1].w + D2[1].w + D3[1].w;                      \
    D2[2].x = D2[2].x + D2[2].x + D3[2].x;                      \
    D2[2].y = D2[2].y + D2[2].y + D3[2].y;                      \
    D2[2].z = D2[2].z + D2[2].z + D3[2].z;                      \
    D2[2].w = D2[2].w + D2[2].w + D3[2].w;                      \
    D2[3].x = D2[3].x + D2[3].x + D3[3].x;                      \
    D2[3].y = D2[3].y + D2[3].y + D3[3].y;                      \
    D2[3].z = D2[3].z + D2[3].z + D3[3].z;                      \
    D2[3].w = D2[3].w + D2[3].w + D3[3].w;                      \
                                                                \
    D0[0].x = W3[3].x;                                          \
    D0[0].y = W3[3].y;                                          \
    D0[0].z = W3[3].z;                                          \
    D0[0].w = W3[3].w;                                          \
    D0[1].x = U3 * W0[3].x;                                     \
    D0[1].y = U3 * W0[3].y;                                     \
    D0[1].z = U3 * W0[3].z;                                     \
    D0[1].w = U3 * W0[3].w;                                     \
    D0[2].x = U2 * W1[3].x;                                     \
    D0[2].y = U2 * W1[3].y;                                     \
    D0[2].z = U2 * W1[3].z;                                     \
    D0[2].w = U2 * W1[3].w;                                     \
    D0[3].x = 6 * D0[1].x;                                      \
    D0[3].y = 6 * D0[1].y;                                      \
    D0[3].z = 6 * D0[1].z;                                      \
    D0[3].w = 6 * D0[1].w;                                      \
    D0[1].x = D0[1].x + D0[2].x + U1 * W2[3].x;                 \
    D0[1].y = D0[1].y + D0[2].y + U1 * W2[3].y;                 \
    D0[1].z = D0[1].z + D0[2].z + U1 * W2[3].z;                 \
    D0[1].w = D0[1].w + D0[2].w + U1 * W2[3].w;                 \
    D0[2].x = D0[2].x + D0[2].x + D0[3].x;                      \
    D0[2].y = D0[2].y + D0[2].y + D0[3].y;                      \
    D0[2].z = D0[2].z + D0[2].z + D0[3].z;                      \
    D0[2].w = D0[2].w + D0[2].w + D0[3].w;                      \
}                                                               \
MACRO_STOP

#define RtBezierQuadTangentMacro(_D, _theta, _P)                           \
MACRO_START                                                                \
{                                                                          \
    const RtBezierV4d      * const P0 = &(_P)[0][0];                       \
    const RtBezierV4d      * const P1 = &(_P)[1][0];                       \
    const RtBezierV4d      * const P2 = &(_P)[2][0];                       \
    const RtBezierV4d      * const P3 = &(_P)[3][0];                       \
    const RwReal       c = (RwReal) RwCos(_theta);                         \
    const RwReal       s = (RwReal) RwSin(_theta);                         \
    const RwReal     _3c_add_s = (3 * c + s);                              \
    const RwReal     _3s_add_c = (3 * s + c);                              \
    const RwReal     _s_add_c = (s + c);                                   \
    const RwReal     _s_sub_3c = (s - 3 * c);                              \
    const RwReal     _s_sub_c = (s - c);                                   \
    RtBezierV4d      * const D0 = &(_D)[0][0];                             \
    RtBezierV4d      * const D1 = &(_D)[1][0];                             \
    RtBezierV4d      * const D2 = &(_D)[2][0];                             \
    RtBezierV4d      * const D3 = &(_D)[3][0];                             \
                                                                           \
    D0[0].x = 3 * (P1[0].x * c + P0[1].x * s - P0[0].x * _s_add_c);        \
    D0[0].y = 3 * (P1[0].y * c + P0[1].y * s - P0[0].y * _s_add_c);        \
    D0[0].z = 3 * (P1[0].z * c + P0[1].z * s - P0[0].z * _s_add_c);        \
                                                                           \
    D0[1].x = (3 * (P1[1].x * c) + s * (2 * P0[2].x - P0[0].x) -           \
                P0[1].x * _3c_add_s);                                      \
    D0[1].y = (3 * (P1[1].y * c) + s * (2 * P0[2].y - P0[0].y) -           \
                P0[1].y * _3c_add_s);                                      \
    D0[1].z = (3 * (P1[1].z * c) + s * (2 * P0[2].z - P0[0].z) -           \
                P0[1].z * _3c_add_s);                                      \
                                                                           \
    D0[2].x = (s * (P0[3].x - 2 * P0[1].x) + 3 * (P1[2].x * c) +           \
                P0[2].x * _s_sub_3c);                                      \
    D0[2].y = (s * (P0[3].y - 2 * P0[1].y) + 3 * (P1[2].y * c) +           \
                P0[2].y * _s_sub_3c);                                      \
    D0[2].z = (s * (P0[3].z - 2 * P0[1].z) + 3 * (P1[2].z * c) +           \
                P0[2].z * _s_sub_3c);                                      \
                                                                           \
    D0[3].x = 3 * (P1[3].x * c - P0[2].x * s + P0[3].x * _s_sub_c);        \
    D0[3].y = 3 * (P1[3].y * c - P0[2].y * s + P0[3].y * _s_sub_c);        \
    D0[3].z = 3 * (P1[3].z * c - P0[2].z * s + P0[3].z * _s_sub_c);        \
                                                                           \
    D1[0].x = (3 * (P1[1].x * s) + c * (2 * P2[0].x - P0[0].x) -           \
                P1[0].x * _3s_add_c);                                      \
    D1[0].y = (3 * (P1[1].y * s) + c * (2 * P2[0].y - P0[0].y) -           \
                P1[0].y * _3s_add_c);                                      \
    D1[0].z = (3 * (P1[1].z * s) + c * (2 * P2[0].z - P0[0].z) -           \
                P1[0].z * _3s_add_c);                                      \
                                                                           \
    D1[1].x = (s * (2 * P1[2].x - P1[0].x) + c * (2 * P2[1].x - P0[1].x) - \
                P1[1].x * _s_add_c);                                       \
    D1[1].y = (s * (2 * P1[2].y - P1[0].y) + c * (2 * P2[1].y - P0[1].y) - \
                P1[1].y * _s_add_c);                                       \
    D1[1].z = (s * (2 * P1[2].z - P1[0].z) + c * (2 * P2[1].z - P0[1].z) - \
                P1[1].z * _s_add_c);                                       \
                                                                           \
    D1[2].x = (c * (2 * P2[2].x - P0[2].x) + s * (P1[3].x - 2 * P1[1].x) + \
                P1[2].x * _s_sub_c);                                       \
    D1[2].y = (c * (2 * P2[2].y - P0[2].y) + s * (P1[3].y - 2 * P1[1].y) + \
                P1[2].y * _s_sub_c);                                       \
    D1[2].z = (c * (2 * P2[2].z - P0[2].z) + s * (P1[3].z - 2 * P1[1].z) + \
                P1[2].z * _s_sub_c);                                       \
                                                                           \
    D1[3].x = (c * (2 * P2[3].x - P0[3].x) - 3 * (P1[2].x * s) +           \
                P1[3].x * (3 * s - c));                                    \
    D1[3].y = (c * (2 * P2[3].y - P0[3].y) - 3 * (P1[2].y * s) +           \
                P1[3].y * (3 * s - c));                                    \
    D1[3].z = (c * (2 * P2[3].z - P0[3].z) - 3 * (P1[2].z * s) +           \
                P1[3].z * (3 * s - c));                                    \
                                                                           \
    D2[0].x = (c * (P3[0].x - 2 * P1[0].x + P2[0].x) +                     \
                s * (3 * P2[1].x - 3 * P2[0].x));                          \
    D2[0].y = (c * (P3[0].y - 2 * P1[0].y + P2[0].y) +                     \
                s * (3 * P2[1].y - 3 * P2[0].y));                          \
    D2[0].z = (c * (P3[0].z - 2 * P1[0].z + P2[0].z) +                     \
                s * (3 * P2[1].z - 3 * P2[0].z));                          \
                                                                           \
    D2[1].x = (c * (P3[1].x - 2 * P1[1].x + P2[1].x) +                     \
                s * (2 * P2[2].x - P2[1].x - P2[0].x));                    \
    D2[1].y = (c * (P3[1].y - 2 * P1[1].y + P2[1].y) +                     \
                s * (2 * P2[2].y - P2[1].y - P2[0].y));                    \
    D2[1].z = (c * (P3[1].z - 2 * P1[1].z + P2[1].z) +                     \
                s * (2 * P2[2].z - P2[1].z - P2[0].z));                    \
                                                                           \
    D2[2].x =                                                              \
        (c * (P3[2].x - 2 * P1[2].x + P2[2].x) +                           \
         s * (P2[3].x - 2 * P2[1].x + P2[2].x));                           \
    D2[2].y = (c * (P3[2].y - 2 * P1[2].y + P2[2].y) +                     \
                s * (P2[3].y - 2 * P2[1].y + P2[2].y));                    \
    D2[2].z = (c * (P3[2].z - 2 * P1[2].z + P2[2].z) +                     \
                s * (P2[3].z - 2 * P2[1].z + P2[2].z));                    \
                                                                           \
    D2[3].x = (s * (3 * P2[3].x - 3 * P2[2].x) +                           \
                c * (P3[3].x - 2 * P1[3].x + P2[3].x));                    \
    D2[3].y = (s * (3 * P2[3].y - 3 * P2[2].y) +                           \
                c * (P3[3].y - 2 * P1[3].y + P2[3].y));                    \
    D2[3].z = (s * (3 * P2[3].z - 3 * P2[2].z) +                           \
                c * (P3[3].z - 2 * P1[3].z + P2[3].z));                    \
                                                                           \
    D3[0].x = 3 * (c * (P3[0].x - P2[0].x) + s * (P3[1].x - P3[0].x));     \
    D3[0].y = 3 * (c * (P3[0].y - P2[0].y) + s * (P3[1].y - P3[0].y));     \
    D3[0].z = 3 * (c * (P3[0].z - P2[0].z) + s * (P3[1].z - P3[0].z));     \
                                                                           \
    D3[1].x = (c * (3 * P3[1].x - 3 * P2[1].x) +                           \
                s * (2 * P3[2].x - P3[0].x - P3[1].x));                    \
    D3[1].y = (c * (3 * P3[1].y - 3 * P2[1].y) +                           \
                s * (2 * P3[2].y - P3[0].y - P3[1].y));                    \
    D3[1].z = (c * (3 * P3[1].z - 3 * P2[1].z) +                           \
                s * (2 * P3[2].z - P3[0].z - P3[1].z));                    \
                                                                           \
    D3[2].x = (c * (3 * P3[2].x - 3 * P2[2].x) +                           \
                s * (P3[3].x - 2 * P3[1].x + P3[2].x));                    \
    D3[2].y = (c * (3 * P3[2].y - 3 * P2[2].y) +                           \
                s * (P3[3].y - 2 * P3[1].y + P3[2].y));                    \
    D3[2].z = (c * (3 * P3[2].z - 3 * P2[2].z) +                           \
                s * (P3[3].z - 2 * P3[1].z + P3[2].z));                    \
                                                                           \
    D3[3].x = 3 * (s * (P3[3].x - P3[2].x) + c * (P3[3].x - P2[3].x));     \
    D3[3].y = 3 * (s * (P3[3].y - P3[2].y) + c * (P3[3].y - P2[3].y));     \
    D3[3].z = 3 * (s * (P3[3].z - P3[2].z) + c * (P3[3].z - P2[3].z));     \
}                                                                          \
MACRO_STOP

#define RtBezierQuadTangentPairMacro(_Dt,_Dp, _theta, _P)                   \
MACRO_START                                                                 \
{                                                                           \
    const RtBezierV4d      * const P0 = &(_P)[0][0];                        \
    const RtBezierV4d      * const P1 = &(_P)[1][0];                        \
    const RtBezierV4d      * const P2 = &(_P)[2][0];                        \
    const RtBezierV4d      * const P3 = &(_P)[3][0];                        \
    const RwReal       c = (RwReal) RwCos(_theta);                          \
    const RwReal       s = (RwReal) RwSin(_theta);                          \
    const RwReal     _3c_add_s = (3 * c + s);                               \
    const RwReal     _3c_sub_s = (3 * c - s);                               \
    const RwReal     _3s_add_c = (3 * s + c);                               \
    const RwReal     _c_sub_3s = (c - 3 * s);                               \
    const RwReal     _c_sub_s = (c - s);                                    \
    const RwReal     _s_add_c = (s + c);                                    \
    const RwReal     _s_sub_3c = (s - 3 * c);                               \
    const RwReal     _s_sub_c = (s - c);                                    \
    RtBezierV4d      * const Dt0 = &(_Dt)[0][0];                            \
    RtBezierV4d      * const Dt1 = &(_Dt)[1][0];                            \
    RtBezierV4d      * const Dt2 = &(_Dt)[2][0];                            \
    RtBezierV4d      * const Dt3 = &(_Dt)[3][0];                            \
    RtBezierV4d      * const Dp0 = &(_Dp)[0][0];                            \
    RtBezierV4d      * const Dp1 = &(_Dp)[1][0];                            \
    RtBezierV4d      * const Dp2 = &(_Dp)[2][0];                            \
    RtBezierV4d      * const Dp3 = &(_Dp)[3][0];                            \
                                                                            \
    Dt0[0].x = 3 * (P1[0].x * c + P0[1].x * s - P0[0].x * _s_add_c);        \
    Dt0[0].y = 3 * (P1[0].y * c + P0[1].y * s - P0[0].y * _s_add_c);        \
    Dt0[0].z = 3 * (P1[0].z * c + P0[1].z * s - P0[0].z * _s_add_c);        \
                                                                            \
    Dt0[1].x = (3 * (P1[1].x * c) + s * (2 * P0[2].x - P0[0].x) -           \
                P0[1].x * _3c_add_s);                                       \
    Dt0[1].y = (3 * (P1[1].y * c) + s * (2 * P0[2].y - P0[0].y) -           \
                P0[1].y * _3c_add_s);                                       \
    Dt0[1].z = (3 * (P1[1].z * c) + s * (2 * P0[2].z - P0[0].z) -           \
                P0[1].z * _3c_add_s);                                       \
                                                                            \
    Dt0[2].x = (s * (P0[3].x - 2 * P0[1].x) + 3 * (P1[2].x * c) +           \
                P0[2].x * _s_sub_3c);                                       \
    Dt0[2].y = (s * (P0[3].y - 2 * P0[1].y) + 3 * (P1[2].y * c) +           \
                P0[2].y * _s_sub_3c);                                       \
    Dt0[2].z = (s * (P0[3].z - 2 * P0[1].z) + 3 * (P1[2].z * c) +           \
                P0[2].z * _s_sub_3c);                                       \
                                                                            \
    Dt0[3].x = 3 * (P1[3].x * c - P0[2].x * s + P0[3].x * _s_sub_c);        \
    Dt0[3].y = 3 * (P1[3].y * c - P0[2].y * s + P0[3].y * _s_sub_c);        \
    Dt0[3].z = 3 * (P1[3].z * c - P0[2].z * s + P0[3].z * _s_sub_c);        \
                                                                            \
    Dt1[0].x = (3 * (P1[1].x * s) + c * (2 * P2[0].x - P0[0].x) -           \
                P1[0].x * _3s_add_c);                                       \
    Dt1[0].y = (3 * (P1[1].y * s) + c * (2 * P2[0].y - P0[0].y) -           \
                P1[0].y * _3s_add_c);                                       \
    Dt1[0].z = (3 * (P1[1].z * s) + c * (2 * P2[0].z - P0[0].z) -           \
                P1[0].z * _3s_add_c);                                       \
                                                                            \
    Dt1[1].x = (s * (2 * P1[2].x - P1[0].x) + c * (2 * P2[1].x - P0[1].x) - \
                P1[1].x * _s_add_c);                                        \
    Dt1[1].y = (s * (2 * P1[2].y - P1[0].y) + c * (2 * P2[1].y - P0[1].y) - \
                P1[1].y * _s_add_c);                                        \
    Dt1[1].z = (s * (2 * P1[2].z - P1[0].z) + c * (2 * P2[1].z - P0[1].z) - \
                P1[1].z * _s_add_c);                                        \
                                                                            \
    Dt1[2].x = (c * (2 * P2[2].x - P0[2].x) + s * (P1[3].x - 2 * P1[1].x) + \
                P1[2].x * _s_sub_c);                                        \
    Dt1[2].y = (c * (2 * P2[2].y - P0[2].y) + s * (P1[3].y - 2 * P1[1].y) + \
                P1[2].y * _s_sub_c);                                        \
    Dt1[2].z = (c * (2 * P2[2].z - P0[2].z) + s * (P1[3].z - 2 * P1[1].z) + \
                P1[2].z * _s_sub_c);                                        \
                                                                            \
    Dt1[3].x = (c * (2 * P2[3].x - P0[3].x) - 3 * (P1[2].x * s) +           \
                P1[3].x * (3 * s - c));                                     \
    Dt1[3].y = (c * (2 * P2[3].y - P0[3].y) - 3 * (P1[2].y * s) +           \
                P1[3].y * (3 * s - c));                                     \
    Dt1[3].z = (c * (2 * P2[3].z - P0[3].z) - 3 * (P1[2].z * s) +           \
                P1[3].z * (3 * s - c));                                     \
                                                                            \
    Dt2[0].x = (c * (P3[0].x - 2 * P1[0].x + P2[0].x) +                     \
                s * (3 * P2[1].x - 3 * P2[0].x));                           \
    Dt2[0].y = (c * (P3[0].y - 2 * P1[0].y + P2[0].y) +                     \
                s * (3 * P2[1].y - 3 * P2[0].y));                           \
    Dt2[0].z = (c * (P3[0].z - 2 * P1[0].z + P2[0].z) +                     \
                s * (3 * P2[1].z - 3 * P2[0].z));                           \
                                                                            \
    Dt2[1].x = (c * (P3[1].x - 2 * P1[1].x + P2[1].x) +                     \
                s * (2 * P2[2].x - P2[1].x - P2[0].x));                     \
    Dt2[1].y = (c * (P3[1].y - 2 * P1[1].y + P2[1].y) +                     \
                s * (2 * P2[2].y - P2[1].y - P2[0].y));                     \
    Dt2[1].z = (c * (P3[1].z - 2 * P1[1].z + P2[1].z) +                     \
                s * (2 * P2[2].z - P2[1].z - P2[0].z));                     \
                                                                            \
    Dt2[2].x =                                                              \
        (c * (P3[2].x - 2 * P1[2].x + P2[2].x) +                            \
         s * (P2[3].x - 2 * P2[1].x + P2[2].x));                            \
    Dt2[2].y = (c * (P3[2].y - 2 * P1[2].y + P2[2].y) +                     \
                s * (P2[3].y - 2 * P2[1].y + P2[2].y));                     \
    Dt2[2].z = (c * (P3[2].z - 2 * P1[2].z + P2[2].z) +                     \
                s * (P2[3].z - 2 * P2[1].z + P2[2].z));                     \
                                                                            \
    Dt2[3].x = (s * (3 * P2[3].x - 3 * P2[2].x) +                           \
                c * (P3[3].x - 2 * P1[3].x + P2[3].x));                     \
    Dt2[3].y = (s * (3 * P2[3].y - 3 * P2[2].y) +                           \
                c * (P3[3].y - 2 * P1[3].y + P2[3].y));                     \
    Dt2[3].z = (s * (3 * P2[3].z - 3 * P2[2].z) +                           \
                c * (P3[3].z - 2 * P1[3].z + P2[3].z));                     \
                                                                            \
    Dt3[0].x = 3 * (c * (P3[0].x - P2[0].x) + s * (P3[1].x - P3[0].x));     \
    Dt3[0].y = 3 * (c * (P3[0].y - P2[0].y) + s * (P3[1].y - P3[0].y));     \
    Dt3[0].z = 3 * (c * (P3[0].z - P2[0].z) + s * (P3[1].z - P3[0].z));     \
                                                                            \
    Dt3[1].x = (c * (3 * P3[1].x - 3 * P2[1].x) +                           \
                s * (2 * P3[2].x - P3[0].x - P3[1].x));                     \
    Dt3[1].y = (c * (3 * P3[1].y - 3 * P2[1].y) +                           \
                s * (2 * P3[2].y - P3[0].y - P3[1].y));                     \
    Dt3[1].z = (c * (3 * P3[1].z - 3 * P2[1].z) +                           \
                s * (2 * P3[2].z - P3[0].z - P3[1].z));                     \
                                                                            \
    Dt3[2].x = (c * (3 * P3[2].x - 3 * P2[2].x) +                           \
                s * (P3[3].x - 2 * P3[1].x + P3[2].x));                     \
    Dt3[2].y = (c * (3 * P3[2].y - 3 * P2[2].y) +                           \
                s * (P3[3].y - 2 * P3[1].y + P3[2].y));                     \
    Dt3[2].z = (c * (3 * P3[2].z - 3 * P2[2].z) +                           \
                s * (P3[3].z - 2 * P3[1].z + P3[2].z));                     \
                                                                            \
    Dt3[3].x = 3 * (s * (P3[3].x - P3[2].x) + c * (P3[3].x - P2[3].x));     \
    Dt3[3].y = 3 * (s * (P3[3].y - P3[2].y) + c * (P3[3].y - P2[3].y));     \
    Dt3[3].z = 3 * (s * (P3[3].z - P3[2].z) + c * (P3[3].z - P2[3].z));     \
                                                                            \
    Dp0[0].x = 3 * (s * (P0[0].x - P1[0].x) + c * (P0[1].x - P0[0].x));     \
    Dp0[0].y = 3 * (s * (P0[0].y - P1[0].y) + c * (P0[1].y - P0[0].y));     \
    Dp0[0].z = 3 * (s * (P0[0].z - P1[0].z) + c * (P0[1].z - P0[0].z));     \
                                                                            \
    Dp0[1].x = (s * (3 * P0[1].x - 3 * P1[1].x) +                           \
                c * (2 * P0[2].x - P0[0].x - P0[1].x));                     \
    Dp0[1].y = (s * (3 * P0[1].y - 3 * P1[1].y) +                           \
                c * (2 * P0[2].y - P0[0].y - P0[1].y));                     \
    Dp0[1].z = (s * (3 * P0[1].z - 3 * P1[1].z) +                           \
                c * (2 * P0[2].z - P0[0].z - P0[1].z));                     \
                                                                            \
    Dp0[2].x = (s * (3 * P0[2].x - 3 * P1[2].x) +                           \
                c * (P0[3].x - 2 * P0[1].x + P0[2].x));                     \
    Dp0[2].y = (s * (3 * P0[2].y - 3 * P1[2].y) +                           \
                c * (P0[3].y - 2 * P0[1].y + P0[2].y));                     \
    Dp0[2].z = (s * (3 * P0[2].z - 3 * P1[2].z) +                           \
                c * (P0[3].z - 2 * P0[1].z + P0[2].z));                     \
                                                                            \
    Dp0[3].x = 3 * (c * (P0[3].x - P0[2].x) + s * (P0[3].x - P1[3].x));     \
    Dp0[3].y = 3 * (c * (P0[3].y - P0[2].y) + s * (P0[3].y - P1[3].y));     \
    Dp0[3].z = 3 * (c * (P0[3].z - P0[2].z) + s * (P0[3].z - P1[3].z));     \
                                                                            \
    Dp1[0].x = (s * (P0[0].x - 2 * P2[0].x) + 3 * (P1[1].x * c) +           \
                P1[0].x * _s_sub_3c);                                       \
    Dp1[0].y = (s * (P0[0].y - 2 * P2[0].y) + 3 * (P1[1].y * c) +           \
                P1[0].y * _s_sub_3c);                                       \
    Dp1[0].z = (s * (P0[0].z - 2 * P2[0].z) + 3 * (P1[1].z * c) +           \
                P1[0].z * _s_sub_3c);                                       \
                                                                            \
    Dp1[1].x = (c * (2 * P1[2].x - P1[0].x) + s * (P0[1].x - 2 * P2[1].x) + \
                P1[1].x * _s_sub_c);                                        \
    Dp1[1].y = (c * (2 * P1[2].y - P1[0].y) + s * (P0[1].y - 2 * P2[1].y) + \
                P1[1].y * _s_sub_c);                                        \
    Dp1[1].z = (c * (2 * P1[2].z - P1[0].z) + s * (P0[1].z - 2 * P2[1].z) + \
                P1[1].z * _s_sub_c);                                        \
                                                                            \
    Dp1[2].x = (c * (P1[3].x - 2 * P1[1].x) + s * (P0[2].x - 2 * P2[2].x) + \
                P1[2].x * _s_add_c);                                        \
    Dp1[2].y = (c * (P1[3].y - 2 * P1[1].y) + s * (P0[2].y - 2 * P2[2].y) + \
                P1[2].y * _s_add_c);                                        \
    Dp1[2].z = (c * (P1[3].z - 2 * P1[1].z) + s * (P0[2].z - 2 * P2[2].z) + \
                P1[2].z * _s_add_c);                                        \
                                                                            \
    Dp1[3].x = (s * (P0[3].x - 2 * P2[3].x) - 3 * (P1[2].x * c) +           \
                P1[3].x * _3c_add_s);                                       \
    Dp1[3].y = (s * (P0[3].y - 2 * P2[3].y) - 3 * (P1[2].y * c) +           \
                P1[3].y * _3c_add_s);                                       \
    Dp1[3].z = (s * (P0[3].z - 2 * P2[3].z) - 3 * (P1[2].z * c) +           \
                P1[3].z * _3c_add_s);                                       \
                                                                            \
    Dp2[0].x = (3 * (P2[1].x * c) + s * (2 * P1[0].x - P3[0].x) -           \
                P2[0].x * _3c_add_s);                                       \
    Dp2[0].y = (3 * (P2[1].y * c) + s * (2 * P1[0].y - P3[0].y) -           \
                P2[0].y * _3c_add_s);                                       \
    Dp2[0].z = (3 * (P2[1].z * c) + s * (2 * P1[0].z - P3[0].z) -           \
                P2[0].z * _3c_add_s);                                       \
                                                                            \
    Dp2[1].x = (s * (2 * P1[1].x - P3[1].x) + c * (2 * P2[2].x - P2[0].x) - \
                P2[1].x * _s_add_c);                                        \
    Dp2[1].y = (s * (2 * P1[1].y - P3[1].y) + c * (2 * P2[2].y - P2[0].y) - \
                P2[1].y * _s_add_c);                                        \
    Dp2[1].z = (s * (2 * P1[1].z - P3[1].z) + c * (2 * P2[2].z - P2[0].z) - \
                P2[1].z * _s_add_c);                                        \
                                                                            \
    Dp2[2].x = (s * (2 * P1[2].x - P3[2].x) + c * (P2[3].x - 2 * P2[1].x) + \
                P2[2].x * _c_sub_s);                                        \
    Dp2[2].y = (s * (2 * P1[2].y - P3[2].y) + c * (P2[3].y - 2 * P2[1].y) + \
                P2[2].y * _c_sub_s);                                        \
    Dp2[2].z = (s * (2 * P1[2].z - P3[2].z) + c * (P2[3].z - 2 * P2[1].z) + \
                P2[2].z * _c_sub_s);                                        \
                                                                            \
    Dp2[3].x = (s * (2 * P1[3].x - P3[3].x) - 3 * (P2[2].x * c) +           \
                P2[3].x * _3c_sub_s);                                       \
    Dp2[3].y = (s * (2 * P1[3].y - P3[3].y) - 3 * (P2[2].y * c) +           \
                P2[3].y * _3c_sub_s);                                       \
    Dp2[3].z = (s * (2 * P1[3].z - P3[3].z) - 3 * (P2[2].z * c) +           \
                P2[3].z * _3c_sub_s);                                       \
                                                                            \
    Dp3[0].x = 3 * (P2[0].x * s + P3[1].x * c - P3[0].x * _s_add_c);        \
    Dp3[0].y = 3 * (P2[0].y * s + P3[1].y * c - P3[0].y * _s_add_c);        \
    Dp3[0].z = 3 * (P2[0].z * s + P3[1].z * c - P3[0].z * _s_add_c);        \
                                                                            \
    Dp3[1].x = (3 * (P2[1].x * s) + c * (2 * P3[2].x - P3[0].x) -           \
                P3[1].x * _3s_add_c);                                       \
    Dp3[1].y = (3 * (P2[1].y * s) + c * (2 * P3[2].y - P3[0].y) -           \
                P3[1].y * _3s_add_c);                                       \
    Dp3[1].z = (3 * (P2[1].z * s) + c * (2 * P3[2].z - P3[0].z) -           \
                P3[1].z * _3s_add_c);                                       \
                                                                            \
    Dp3[2].x = (c * (P3[3].x - 2 * P3[1].x) + 3 * (P2[2].x * s) +           \
                P3[2].x * _c_sub_3s);                                       \
    Dp3[2].y = (c * (P3[3].y - 2 * P3[1].y) + 3 * (P2[2].y * s) +           \
                P3[2].y * _c_sub_3s);                                       \
    Dp3[2].z = (c * (P3[3].z - 2 * P3[1].z) + 3 * (P2[2].z * s) +           \
                P3[2].z * _c_sub_3s);                                       \
                                                                            \
    Dp3[3].x = 3 * (P2[3].x * s - P3[2].x * c + P3[3].x * _c_sub_s);        \
    Dp3[3].y = 3 * (P2[3].y * s - P3[2].y * c + P3[3].y * _c_sub_s);        \
    Dp3[3].z = 3 * (P2[3].z * s - P3[2].z * c + P3[3].z * _c_sub_s);        \
                                                                            \
}                                                                           \
MACRO_STOP

#ifdef    __cplusplus
extern              "C"
{
#endif                          /* __cplusplus */

/* RWPUBLIC */
#ifdef    __cplusplus
}
#endif                          /* __cplusplus */

#endif                          /* (!defined(_RTBEZPAT_H)) */
