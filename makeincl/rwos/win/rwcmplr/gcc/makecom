########################
# These are for gcc
# See
# o GCC homepage
#   http://www.gnu.org/software/gcc
# o GCC compilations flags
#   http://www.gnu.org/software/gcc/onlinedocs/gcc_2.html
# o GCC for Win32
#   http://sourceware.cygnus.com
#   ftp://sunsite.org.uk/Mirrors/sourceware.cygnus.com/pub/cygwin/
########################

ifeq ($(SMALLCODE), 1)
C_OPT = -O1
else
C_OPT = -O2
endif

CWARNINGS = \
 -W \
 -Wall \
 -Wcast-qual \
 -Wid-clash-32 \
 -Wmissing-declarations \
 -Wmissing-prototypes \
 -Wpointer-arith \
 -Wredundant-decls \
 -Wstrict-prototypes \
 -Wundef

# -Wunreachable-code

ifeq ($(COPTIMIZE), 1)
CFLAGS += $(CWARNINGS) $(C_OPT) -DNDEBUG -U_DEBUG
else
# CFLAGS += -Wall -O0
# gcc requires the generation of a dependency tree, 
# and hence at least -O1,
# to detect any use of uninitialized variables
CFLAGS +=  -ansi -pedantic $(CWARNINGS) -O1 -UNDEBUG -D_DEBUG
endif

ifeq ($(CDEBUG), 1)
CFLAGS += -g
endif

# These seem to be platform specific, not compiler specific

ifeq ($(NOASM), 1)
CFLAGS += -DNOASM 
endif

CFLAGS += -DWIN32

CFLAGS += -fno-rtti -fno-exceptions

ifeq ("$(COMPILER)", "")
COMPILER=cc
endif

ifeq ("$(LINKER)", "")
# It should be this, but we have a rather strange idea of LINKER
LINKER=link.exe
endif

CC        = gcc
CPP       = $(CC)
COUT      = -c -o
LOUT      = -e
SOUT      = -S -o $(@F)
CPPOPT    = -E -P

ASM       = s
AS        = nasm
ASFLAGS   = -i$(SRCDIR)/ -i$(DEVDIR)/$(RWTARGET)/ -i$(BASEDIR)/makecom/nasm/ -f elf -dELF -dBCC -dSTACK 
AOUT      = -o

# Librarian options (for append, we include the source lib again)
AR		= ar -r
ARCREATEFLAGS   = $@ $^
ARAPPENDFLAGS	= -out:$@ $@

# How to run programs (no need for shell/simulator)
RUNIT		=
